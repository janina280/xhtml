/* The following code was generated by JFlex 1.3.5 on 10/21/24, 8:24 AM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 10/21/24, 8:24 AM from the specification file
 * <tt>file:/C:/Users/anina/OneDrive/Desktop/Homework Faculty/xhtml/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\16\0\4\0\1\3\1\22"+
    "\1\20\1\0\1\0\1\0\1\21\1\0\1\13\1\14\1\6\1\10"+
    "\1\0\1\11\1\0\1\5\1\4\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\3\4\1\57\1\7\1\15\1\17\1\16\2\0\1\0\1\33"+
    "\1\25\1\23\1\31\3\0\1\35\2\0\1\34\2\0\1\24\1\30"+
    "\3\0\1\26\1\32\3\0\1\27\1\0\4\0\1\0\1\0\1\51"+
    "\1\61\1\40\1\47\1\37\1\50\1\54\1\66\1\42\1\64\1\60"+
    "\1\43\1\56\1\12\1\45\1\44\1\65\1\36\1\53\1\41\1\52"+
    "\1\63\1\62\1\55\1\46\1\75\4\0\41\0\2\0\4\0\4\0"+
    "\1\0\2\0\1\0\7\0\1\0\4\0\1\0\5\0\27\0\1\0"+
    "\37\0\1\0\u01ca\0\4\0\14\0\16\0\5\0\7\0\1\0\1\0"+
    "\1\0\21\0\160\0\5\0\1\0\2\0\2\0\4\0\1\0\1\0"+
    "\6\0\1\0\1\0\3\0\1\0\1\0\1\0\24\0\1\0\123\0"+
    "\1\0\213\0\1\0\5\0\2\0\246\0\1\0\46\0\2\0\1\0"+
    "\6\0\51\0\6\0\1\0\1\0\55\0\1\0\1\0\1\0\2\0"+
    "\1\0\2\0\1\0\1\0\10\0\33\0\4\0\4\0\15\0\6\0"+
    "\5\0\1\0\4\0\13\0\1\0\1\0\3\0\53\0\37\0\4\0"+
    "\2\0\1\0\143\0\1\0\1\0\10\0\1\0\6\0\2\0\2\0"+
    "\1\0\4\0\2\0\12\0\3\0\2\0\1\0\17\0\1\0\1\0"+
    "\1\0\36\0\33\0\2\0\131\0\13\0\1\0\16\0\12\0\41\0"+
    "\11\0\2\0\4\0\1\0\2\0\1\0\30\0\4\0\1\0\11\0"+
    "\1\0\3\0\1\0\5\0\22\0\31\0\3\0\4\0\13\0\5\0"+
    "\30\0\1\0\6\0\1\0\2\0\6\0\10\0\52\0\72\0\66\0"+
    "\3\0\1\0\22\0\1\0\7\0\12\0\2\0\2\0\12\0\1\0"+
    "\20\0\3\0\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0"+
    "\1\0\1\0\3\0\4\0\2\0\1\0\1\0\7\0\2\0\2\0"+
    "\2\0\3\0\1\0\10\0\1\0\4\0\2\0\1\0\3\0\2\0"+
    "\2\0\12\0\4\0\7\0\2\0\1\0\1\0\2\0\3\0\1\0"+
    "\6\0\4\0\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0"+
    "\2\0\1\0\2\0\2\0\1\0\1\0\5\0\4\0\2\0\2\0"+
    "\3\0\3\0\1\0\7\0\4\0\1\0\1\0\7\0\14\0\3\0"+
    "\1\0\13\0\3\0\1\0\11\0\1\0\3\0\1\0\26\0\1\0"+
    "\7\0\1\0\2\0\1\0\5\0\2\0\1\0\1\0\10\0\1\0"+
    "\3\0\1\0\3\0\2\0\1\0\17\0\2\0\2\0\2\0\12\0"+
    "\1\0\1\0\7\0\1\0\6\0\1\0\3\0\1\0\10\0\2\0"+
    "\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0\2\0"+
    "\1\0\1\0\7\0\2\0\2\0\2\0\3\0\7\0\3\0\4\0"+
    "\2\0\1\0\3\0\2\0\2\0\12\0\1\0\1\0\20\0\1\0"+
    "\1\0\1\0\6\0\3\0\3\0\1\0\4\0\3\0\2\0\1\0"+
    "\1\0\1\0\2\0\3\0\2\0\3\0\3\0\3\0\14\0\4\0"+
    "\5\0\3\0\3\0\1\0\4\0\2\0\1\0\6\0\1\0\16\0"+
    "\12\0\11\0\1\0\6\0\5\0\10\0\1\0\3\0\1\0\27\0"+
    "\1\0\20\0\2\0\1\0\1\0\7\0\1\0\3\0\1\0\4\0"+
    "\7\0\2\0\1\0\3\0\2\0\1\0\2\0\2\0\2\0\2\0"+
    "\12\0\20\0\1\0\3\0\1\0\10\0\1\0\3\0\1\0\27\0"+
    "\1\0\12\0\1\0\5\0\2\0\1\0\1\0\7\0\1\0\3\0"+
    "\1\0\4\0\7\0\2\0\6\0\2\0\1\0\2\0\2\0\2\0"+
    "\12\0\1\0\2\0\1\0\14\0\4\0\11\0\1\0\3\0\1\0"+
    "\51\0\2\0\1\0\7\0\1\0\3\0\1\0\4\0\1\0\5\0"+
    "\3\0\1\0\7\0\3\0\2\0\2\0\12\0\12\0\6\0\1\0"+
    "\3\0\1\0\22\0\3\0\30\0\1\0\11\0\1\0\1\0\2\0"+
    "\7\0\3\0\1\0\4\0\6\0\1\0\1\0\1\0\10\0\6\0"+
    "\12\0\2\0\2\0\15\0\60\0\1\0\2\0\7\0\4\0\10\0"+
    "\10\0\1\0\12\0\47\0\2\0\1\0\1\0\1\0\5\0\1\0"+
    "\30\0\1\0\1\0\1\0\12\0\1\0\2\0\11\0\1\0\2\0"+
    "\5\0\1\0\1\0\1\0\7\0\1\0\12\0\2\0\4\0\40\0"+
    "\1\0\27\0\2\0\6\0\12\0\13\0\1\0\1\0\1\0\1\0"+
    "\1\0\4\0\2\0\10\0\1\0\44\0\4\0\24\0\1\0\2\0"+
    "\5\0\13\0\1\0\44\0\11\0\1\0\71\0\53\0\24\0\1\0"+
    "\12\0\6\0\6\0\4\0\4\0\3\0\1\0\3\0\2\0\7\0"+
    "\3\0\4\0\15\0\14\0\1\0\17\0\2\0\46\0\1\0\1\0"+
    "\5\0\1\0\2\0\53\0\1\0\u014d\0\1\0\4\0\2\0\7\0"+
    "\1\0\1\0\1\0\4\0\2\0\51\0\1\0\4\0\2\0\41\0"+
    "\1\0\4\0\2\0\7\0\1\0\1\0\1\0\4\0\2\0\17\0"+
    "\1\0\71\0\1\0\4\0\2\0\103\0\2\0\3\0\40\0\20\0"+
    "\20\0\126\0\2\0\6\0\3\0\u026c\0\2\0\21\0\1\0\32\0"+
    "\5\0\113\0\3\0\13\0\7\0\22\0\4\0\11\0\23\0\3\0"+
    "\13\0\22\0\2\0\14\0\15\0\1\0\3\0\1\0\2\0\14\0"+
    "\64\0\40\0\3\0\1\0\3\0\2\0\1\0\2\0\12\0\41\0"+
    "\17\0\6\0\131\0\7\0\5\0\2\0\42\0\1\0\1\0\5\0"+
    "\106\0\12\0\37\0\1\0\14\0\4\0\14\0\12\0\12\0\36\0"+
    "\2\0\5\0\13\0\54\0\4\0\32\0\6\0\12\0\46\0\27\0"+
    "\5\0\4\0\65\0\12\0\1\0\35\0\2\0\13\0\6\0\12\0"+
    "\15\0\1\0\10\0\16\0\1\0\20\0\61\0\5\0\57\0\21\0"+
    "\10\0\3\0\12\0\21\0\11\0\14\0\3\0\36\0\15\0\2\0"+
    "\12\0\54\0\16\0\14\0\44\0\24\0\10\0\12\0\3\0\3\0"+
    "\12\0\44\0\2\0\11\0\7\0\53\0\2\0\3\0\20\0\3\0"+
    "\1\0\25\0\4\0\1\0\6\0\1\0\2\0\3\0\1\0\5\0"+
    "\300\0\100\0\u0116\0\2\0\6\0\2\0\46\0\2\0\6\0\2\0"+
    "\10\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\37\0\2\0"+
    "\65\0\1\0\7\0\1\0\1\0\3\0\3\0\1\0\7\0\3\0"+
    "\4\0\2\0\6\0\4\0\15\0\5\0\3\0\1\0\7\0\16\0"+
    "\5\0\32\0\5\0\20\0\2\0\23\0\1\0\13\0\5\0\1\0"+
    "\12\0\1\0\1\0\15\0\1\0\20\0\15\0\3\0\41\0\17\0"+
    "\15\0\4\0\1\0\3\0\14\0\21\0\1\0\4\0\1\0\2\0"+
    "\12\0\1\0\1\0\3\0\5\0\6\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\4\0\1\0\13\0\2\0\4\0\5\0\5\0\4\0"+
    "\1\0\21\0\51\0\u0a77\0\345\0\6\0\4\0\3\0\2\0\14\0"+
    "\46\0\1\0\1\0\5\0\1\0\2\0\70\0\7\0\1\0\17\0"+
    "\1\0\27\0\11\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0"+
    "\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\40\0"+
    "\57\0\1\0\u01d5\0\3\0\31\0\11\0\6\0\1\0\5\0\2\0"+
    "\5\0\4\0\126\0\2\0\2\0\2\0\3\0\1\0\132\0\1\0"+
    "\4\0\5\0\53\0\1\0\136\0\21\0\40\0\60\0\20\0\u0200\0"+
    "\u19c0\0\100\0\u568d\0\103\0\56\0\2\0\u010d\0\3\0\20\0\12\0"+
    "\2\0\24\0\57\0\1\0\4\0\12\0\1\0\37\0\2\0\120\0"+
    "\2\0\45\0\11\0\2\0\147\0\2\0\100\0\5\0\2\0\1\0"+
    "\1\0\1\0\5\0\30\0\20\0\1\0\3\0\1\0\4\0\1\0"+
    "\27\0\5\0\4\0\1\0\13\0\1\0\7\0\64\0\14\0\2\0"+
    "\62\0\22\0\12\0\12\0\6\0\22\0\6\0\3\0\1\0\1\0"+
    "\2\0\13\0\34\0\10\0\2\0\27\0\15\0\14\0\35\0\3\0"+
    "\4\0\57\0\16\0\16\0\1\0\12\0\6\0\5\0\1\0\12\0"+
    "\12\0\5\0\1\0\51\0\16\0\11\0\3\0\1\0\10\0\2\0"+
    "\2\0\12\0\6\0\27\0\3\0\1\0\3\0\62\0\1\0\1\0"+
    "\3\0\2\0\2\0\5\0\2\0\1\0\1\0\1\0\30\0\3\0"+
    "\2\0\13\0\5\0\2\0\3\0\2\0\12\0\6\0\2\0\6\0"+
    "\2\0\6\0\11\0\7\0\1\0\7\0\1\0\53\0\1\0\16\0"+
    "\6\0\163\0\10\0\1\0\2\0\2\0\12\0\6\0\u2ba4\0\14\0"+
    "\27\0\4\0\61\0\u2104\0\u016e\0\2\0\152\0\46\0\7\0\14\0"+
    "\5\0\5\0\1\0\1\0\12\0\1\0\15\0\1\0\5\0\1\0"+
    "\1\0\1\0\2\0\1\0\2\0\1\0\154\0\41\0\u016b\0\22\0"+
    "\100\0\2\0\66\0\50\0\15\0\3\0\20\0\20\0\20\0\3\0"+
    "\2\0\30\0\3\0\31\0\1\0\6\0\5\0\1\0\207\0\2\0"+
    "\1\0\4\0\1\0\13\0\12\0\7\0\32\0\4\0\1\0\1\0"+
    "\32\0\13\0\131\0\3\0\6\0\2\0\6\0\2\0\6\0\2\0"+
    "\3\0\3\0\2\0\3\0\2\0\22\0\3\0\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    62,   124,   186,   124,   248,   124,   124,   124,   124, 
      310,   124,   124,   372,   124,   124,   124,   124,   434,   496, 
      558,   620,   682,   744,   806,   868,   930,   992,  1054,  1116, 
     1178,  1240,  1302,  1364,  1426,  1488,  1550,  1612,  1674,  1736, 
     1798,   124,  1860,  1922,  1984,   124,  2046,  2108,  2170,  2232, 
     2294,  2356,  2418,  2480,  2542,   124,  2604,  2666,  2728,  2790, 
     2852,  2914,   124,  2976,   124,  3038,  3100,  3162,   124,  3224, 
     3286,  3348,  3410,  3472,   124,  3534,  3596,  3658,  3720,  3782, 
     3844,  3906,  3968,  4030,  4092,  4154,   124,  4216,  4278,  4340, 
      124,  4402,   124,   124,  4464,  4526,  4588,  4650,  4712,  4774, 
     4836,  4898,  4960,  5022,  5084,   124,  5146,  5208,  5270,  5332, 
     5394,  5456,  5518,  5580,  5642,  5704,  5766,  5828,  5890,  5952, 
     6014,  6076,  6138,  6200,   124,  6262,  6324,  6386,  6448,  6510, 
     6572,  6634,  6696,  6758,  6820,  6882,  6944,  7006,  7068,  7130, 
     7192,  7254,   124,   124,   124,   124,   124,   124,  7316,  7378, 
     7440,  7502,  7564,  7626,  7688,   124,  7750,  7812,   124,  7874, 
     7936,  7998,  8060,   124,  8122,  8184,  8246,  8308,  8370,  8432, 
     8494,  8556,  8618,  8680,  8742,  8804,  8866,  8928,  8990,   124, 
     9052,  9114,  9176,  9238,  9300,  9362,   124,  9424,   124,  9486, 
     9548,  9610,  9672,  9734,  9796,   124,   124,  9858,  9920,  9982, 
    10044, 10106, 10168, 10230, 10292, 10354, 10416, 10478, 10540, 10602, 
    10664, 10726,   124, 10788,   124, 10850,   124,   124, 10912, 10974, 
    11036, 11098, 11160, 11222, 11284, 11346, 11408, 11470,   124, 11532, 
      124, 11594, 11656, 11718, 11780, 11842,   124, 11904, 11966, 12028, 
    12090, 12152, 12214, 12276, 12338, 12400, 12462,   124, 12524, 12586, 
    12648, 12710, 12772, 12834, 12896, 12958, 13020,   124, 13082, 13144, 
      124, 13206,   124, 13268, 13330, 13392, 13454,   124,   124, 13516, 
    13578, 13640, 13702,   124, 13764, 13826, 13888, 13950, 14012, 14074, 
    14136, 14198, 14260, 14322,   124, 14384, 14446,   124, 14508, 14570, 
      124, 14632, 14694, 14756, 14818, 14880, 14942, 15004, 15066, 15128, 
    15190, 15252,   124, 15314, 15376, 15438, 15500, 15562, 15624, 15686, 
    15748, 15810, 15872, 15934, 15996,   124, 16058, 16120, 16182, 16244, 
    16306, 16368, 16430,   124, 16492,   124, 16554,   124, 16616, 16678, 
      124, 16740, 16802, 16864, 16926, 16988, 17050, 17112, 17174, 17236, 
    17298, 17360, 17422, 17484, 17546, 17608, 17670, 17732, 17794, 17856, 
      124, 17918, 17980,   124,   124,   124, 18042, 18104, 18166, 18228, 
    18290, 18352,   124, 18414,   124, 18476, 18538, 18600, 18662, 18724, 
    18786, 18848, 18910,   124,   124,   124, 18972, 19034, 19096, 19158, 
    19220, 19282, 19344,   124, 19406, 19468, 19530, 19592, 19654, 19716, 
    19778, 19840, 19902,   124, 19964, 20026, 20088,   124, 20150, 20212, 
    20274, 20336, 20398, 20460, 20522, 20584,   124, 20646, 20708, 20770, 
    20832, 20894, 20956, 21018,   124,   124, 21080, 21142,   124,   124, 
    21204, 21266, 21328, 21390, 21452, 21514, 21576, 21638, 21700, 21762, 
    21824, 21886, 21948, 22010, 22072, 22134, 22196, 22258,   124,   124, 
    22320,   124,   124,   124,   124,   124, 22382, 22444,   124, 22506, 
      124, 22568, 22630, 22692, 22754, 22816, 22878, 22940, 23002, 23064, 
    23126, 23188, 23250, 23312, 23374, 23436, 23498, 23560, 23622,   124, 
    23684, 23746, 23808, 23870, 23932, 23994,   124, 24056,   124, 24118, 
    24180, 24242,   124, 24304, 24366,   124, 24428, 24490, 24552,   124, 
      124, 24614,   124, 24676, 24738, 24800,   124, 24862, 24924, 24986, 
      124, 25048, 25110, 25172, 25234, 25296,   124, 25358, 25420, 25482, 
    25544, 25606, 25668, 25730, 25792, 25854, 25916, 25978,   124, 26040, 
      124, 26102, 26164, 26226, 26288,   124, 26350, 26412,   124, 26474, 
    26536, 26598, 26660,   124, 26722, 26784, 26846, 26908, 26970, 27032, 
    27094, 27156, 27218,   124, 27280, 27342, 27404, 27466, 27528, 27590, 
    27652, 27714, 27776, 27838, 27900, 27962, 28024, 28086,   124,   124, 
    28148,   124, 28210, 28272, 28334, 28396, 28458, 28520, 28582, 28644, 
    28706,   124, 28768,   124,   124,   124,   124,   124, 28830, 28892, 
      124,   124, 28954, 29016,   124,   124, 29078, 29140, 29202,   124, 
      124, 29264,   124,   124, 29326,   124, 29388, 29450,   124, 29512, 
    29574,   124,   124, 29636, 29698, 29760,   124, 29822,   124, 29884, 
    29946,   124,   124,   124, 30008, 30070, 30132,   124,   124,   124, 
      124,   124, 30194, 30256, 30318,   124, 30380,   124,   124, 30442, 
    30504,   124, 30566, 30628, 30690, 30752, 30814,   124, 30876,   124, 
      124, 30938, 31000, 31062,   124,   124, 31124, 31186,   124,   124, 
      124, 31248, 31310, 31372, 31434, 31496, 31558, 31620,   124, 31682, 
      124, 31744,   124,   124,   124,   124, 31806, 31868,   124,   124, 
      124,   124,   124,   124,   124,   124, 31930,   124,   124, 31992, 
    32054, 32116, 32178, 32240, 32302,   124,   124,   124,   124, 32364, 
    32426,   124, 32488, 32550,   124, 32612,   124, 32674,   124, 32736, 
    32798, 32860, 32922, 32984, 33046,   124, 33108, 33170,   124, 33232, 
      124,   124,   124, 33294,   124, 33356, 33418, 33480,   124,   124, 
    33542, 33604,   124, 33666,   124,   124,   124,   124,   124,   124, 
    33728, 33790, 33852,   124
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\5\3\1\24\5\3\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\3\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\3\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\6\6\77\3"+
    "\100\0\1\5\77\0\1\6\62\0\6\6\46\0\1\54"+
    "\3\0\1\55\31\0\1\56\113\0\1\57\104\0\1\60"+
    "\102\0\1\61\2\0\1\62\2\0\1\63\3\0\1\64"+
    "\1\65\13\0\1\66\21\0\1\67\43\0\1\70\56\0"+
    "\1\71\2\0\1\72\1\73\1\0\1\74\3\0\1\75"+
    "\14\0\1\76\45\0\1\77\1\100\1\0\1\101\1\102"+
    "\2\0\1\103\1\104\1\105\1\106\1\107\7\0\1\110"+
    "\4\0\1\111\21\0\1\112\34\0\1\113\3\0\1\114"+
    "\2\0\1\115\56\0\1\116\2\0\1\117\2\0\1\120"+
    "\3\0\1\121\14\0\1\122\45\0\1\123\6\0\1\124"+
    "\3\0\1\125\36\0\1\126\30\0\1\127\1\130\14\0"+
    "\1\131\53\0\1\132\1\0\1\133\1\134\1\135\3\0"+
    "\1\136\1\137\1\140\62\0\1\141\3\0\1\142\2\0"+
    "\1\143\66\0\1\144\1\0\1\145\2\0\1\146\3\0"+
    "\1\147\5\0\1\150\3\0\1\151\57\0\1\152\7\0"+
    "\1\153\60\0\1\154\1\155\1\156\1\157\1\160\1\0"+
    "\1\161\4\0\1\162\1\163\3\0\1\164\7\0\1\165"+
    "\45\0\1\166\115\0\1\167\56\0\1\170\2\0\1\171"+
    "\6\0\1\172\1\173\104\0\1\174\52\0\1\175\1\176"+
    "\2\0\1\177\1\200\1\0\1\201\1\0\1\202\1\0"+
    "\1\203\1\204\65\0\1\205\100\0\1\206\3\0\1\207"+
    "\1\0\1\210\74\0\1\211\61\0\1\212\1\213\1\0"+
    "\1\214\1\215\10\0\1\216\13\0\1\217\1\220\1\221"+
    "\1\222\1\223\1\224\13\0\1\225\40\0\1\226\12\0"+
    "\1\227\65\0\1\230\43\0\1\231\104\0\1\232\102\0"+
    "\1\233\2\0\1\234\5\0\1\235\1\0\1\236\7\0"+
    "\1\237\66\0\1\240\103\0\1\241\62\0\1\242\71\0"+
    "\1\243\105\0\1\244\62\0\1\245\47\0\1\246\30\0"+
    "\1\247\70\0\1\250\2\0\1\251\105\0\1\252\36\0"+
    "\1\253\30\0\1\254\1\0\1\255\1\0\1\256\72\0"+
    "\1\257\70\0\1\260\11\0\1\261\101\0\1\262\61\0"+
    "\1\263\100\0\1\264\75\0\1\265\76\0\1\266\111\0"+
    "\1\267\61\0\1\270\67\0\1\271\102\0\1\272\6\0"+
    "\1\273\100\0\1\274\73\0\1\275\71\0\1\276\3\0"+
    "\1\277\33\0\1\300\75\0\1\301\75\0\1\302\46\0"+
    "\1\303\67\0\1\304\61\0\1\305\5\0\1\306\73\0"+
    "\1\307\70\0\1\310\14\0\1\311\60\0\1\312\1\0"+
    "\1\313\6\0\1\314\1\315\2\0\1\316\2\0\1\317"+
    "\1\0\1\320\1\321\55\0\1\322\120\0\1\323\51\0"+
    "\1\324\2\0\1\325\4\0\1\326\63\0\1\327\14\0"+
    "\1\330\7\0\1\331\24\0\1\332\124\0\1\333\105\0"+
    "\1\334\63\0\1\335\3\0\1\336\70\0\1\337\76\0"+
    "\1\340\1\341\73\0\1\342\1\0\1\343\1\344\75\0"+
    "\1\345\1\346\1\347\101\0\1\350\70\0\1\351\100\0"+
    "\1\352\13\0\1\353\53\0\1\354\76\0\1\355\100\0"+
    "\1\356\70\0\1\357\6\0\1\360\20\0\1\361\45\0"+
    "\1\362\7\0\1\363\2\0\1\364\121\0\1\365\51\0"+
    "\1\366\102\0\1\367\63\0\1\370\11\0\1\371\2\0"+
    "\1\372\65\0\1\373\75\0\1\374\71\0\1\375\73\0"+
    "\1\376\73\0\1\377\5\0\1\u0100\75\0\1\u0101\72\0"+
    "\1\u0102\10\0\1\u0103\63\0\1\u0104\101\0\1\u0105\71\0"+
    "\1\u0106\106\0\1\u0107\66\0\1\u0108\66\0\1\u0109\2\0"+
    "\1\u010a\5\0\1\u010b\5\0\1\u010c\65\0\1\u010d\103\0"+
    "\1\u010e\63\0\1\u010f\103\0\1\u0110\70\0\1\u0111\71\0"+
    "\1\u0112\4\0\1\u0113\74\0\1\u0114\106\0\1\u0115\61\0"+
    "\1\u0116\100\0\1\u0117\6\0\1\u0118\65\0\1\u0119\14\0"+
    "\1\u011a\66\0\1\u011b\70\0\1\u011c\72\0\1\u011d\76\0"+
    "\1\u011e\73\0\1\u011f\76\0\1\u0120\63\0\1\u0121\104\0"+
    "\1\u0122\102\0\1\u0123\103\0\1\u0124\65\0\1\u0125\124\0"+
    "\1\u0126\62\0\1\u0127\1\u0128\63\0\1\u0129\72\0\1\u012a"+
    "\77\0\1\u012b\75\0\1\u012c\77\0\1\u012d\72\0\1\u012e"+
    "\74\0\1\u012f\111\0\1\u0130\63\0\1\u0131\107\0\1\u0132"+
    "\1\u0133\57\0\1\u0134\76\0\1\u0135\77\0\1\u0136\74\0"+
    "\1\u0137\17\0\1\u0138\53\0\1\u0139\100\0\1\u013a\77\0"+
    "\1\u013b\71\0\1\u013c\103\0\1\u013d\72\0\1\u013e\1\u013f"+
    "\101\0\1\u0140\77\0\1\u0141\76\0\1\u0142\74\0\1\u0143"+
    "\65\0\1\u0144\73\0\1\u0145\116\0\1\u0146\71\0\1\u0147"+
    "\75\0\1\u0148\60\0\1\u0149\106\0\1\u014a\73\0\1\u014b"+
    "\100\0\1\u014c\77\0\1\u014d\61\0\1\u014e\101\0\1\u014f"+
    "\22\0\1\u0150\70\0\1\u0151\61\0\1\u0152\67\0\1\u0153"+
    "\12\0\1\u0154\70\0\1\u0155\67\0\1\u0156\101\0\1\u0157"+
    "\74\0\1\u0158\11\0\1\u0159\60\0\1\u015a\101\0\1\u015b"+
    "\103\0\1\u015c\75\0\1\u015d\63\0\1\u015e\11\0\1\u015f"+
    "\102\0\1\u0160\62\0\1\u0161\71\0\1\u0162\114\0\1\u0163"+
    "\70\0\1\u0164\112\0\1\u0165\54\0\1\u0166\67\0\1\u0167"+
    "\100\0\1\u0168\107\0\1\u0169\57\0\1\u016a\112\0\1\u016b"+
    "\105\0\1\u016c\50\0\1\u016d\115\0\1\u016e\56\0\1\u016f"+
    "\100\0\1\u0170\77\0\1\u0171\70\0\1\u0172\103\0\1\u0173"+
    "\73\0\1\u0174\44\0\1\u0175\122\0\1\u0176\50\0\1\u0177"+
    "\127\0\1\u0178\107\0\1\u0179\75\0\1\u017a\62\0\1\u017b"+
    "\76\0\1\u017c\103\0\1\u017d\35\0\1\u017e\44\0\1\u017f"+
    "\67\0\1\u0180\14\0\1\u0181\51\0\1\u0182\102\0\1\u0183"+
    "\71\0\1\u0184\73\0\1\u0185\101\0\1\u0186\70\0\1\u0187"+
    "\104\0\1\u0188\67\0\1\u0189\102\0\1\u018a\66\0\1\u018b"+
    "\77\0\1\u018c\75\0\1\u018d\103\0\1\u018e\70\0\1\u018f"+
    "\7\0\1\u0190\72\0\1\u0191\67\0\1\u0192\104\0\1\u0193"+
    "\101\0\1\u0194\70\0\1\u0195\72\0\1\u0196\74\0\1\u0197"+
    "\101\0\1\u0198\75\0\1\u0199\64\0\1\u019a\76\0\1\u019b"+
    "\64\0\1\u019c\104\0\1\u019d\105\0\1\u019e\71\0\1\u019f"+
    "\75\0\1\u01a0\100\0\1\u01a1\67\0\1\u01a2\104\0\1\u01a3"+
    "\103\0\1\u01a4\70\0\1\u01a5\66\0\1\u01a6\102\0\1\u01a7"+
    "\6\0\1\u01a8\65\0\1\u01a9\105\0\1\u01aa\61\0\1\u01ab"+
    "\102\0\1\u01ac\67\0\1\u01ad\106\0\1\u01ae\67\0\1\u01af"+
    "\17\0\1\u01b0\56\0\1\u01b1\113\0\1\u01b2\76\0\1\u01b3"+
    "\61\0\1\u01b4\5\0\1\u01b5\73\0\1\u01b6\63\0\1\u01b7"+
    "\77\0\1\u01b8\46\0\1\u01b9\122\0\1\u01ba\104\0\1\u01bb"+
    "\76\0\1\u01bc\67\0\1\u01bd\100\0\1\u01be\43\0\1\u01bf"+
    "\132\0\1\u01c0\71\0\1\u01c1\74\0\1\u01c2\111\0\1\u01c3"+
    "\101\0\1\u01c4\66\0\1\u01c5\64\0\1\u01c6\104\0\1\u01c7"+
    "\67\0\1\u01c8\72\0\1\u01c9\100\0\1\u01ca\113\0\1\u01cb"+
    "\66\0\1\u01cc\71\0\1\u01cd\101\0\1\u01ce\70\0\1\u01cf"+
    "\66\0\1\u01d0\77\0\1\u01d1\106\0\1\u01d2\76\0\1\u01d3"+
    "\104\0\1\u01d4\55\0\1\u01d5\73\0\1\u01d6\105\0\1\u01d7"+
    "\70\0\1\u01d8\45\0\1\u01d9\127\0\1\u01da\6\0\1\u01db"+
    "\67\0\1\u01dc\42\0\1\u01dd\122\0\1\u01de\75\0\1\u01df"+
    "\107\0\1\u01e0\64\0\1\u01e1\101\0\1\u01e2\70\0\1\u01e3"+
    "\114\0\1\u01e4\31\0\1\u01e5\122\0\1\u01e6\105\0\1\u01e7"+
    "\77\0\1\u01e8\66\0\1\u01e9\76\0\1\u01ea\71\0\1\u01eb"+
    "\102\0\1\u01ec\104\0\1\u01ed\65\0\1\u01ee\7\0\1\u01ef"+
    "\67\0\1\u01f0\101\0\1\u01f1\67\0\1\u01f2\71\0\1\u01f3"+
    "\100\0\1\u01f4\115\0\1\u01f5\73\0\1\u01f6\54\0\1\u01f7"+
    "\103\0\1\u01f8\73\0\1\u01f9\77\0\1\u01fa\116\0\1\u01fb"+
    "\63\0\1\u01fc\60\0\1\u01fd\75\0\1\u01fe\100\0\1\u01ff"+
    "\76\0\1\u0200\120\0\1\u0201\46\0\1\u0202\47\0\1\u0203"+
    "\123\0\1\u0204\75\0\1\u0205\100\0\1\u0206\103\0\1\u0207"+
    "\54\0\1\u0208\73\0\1\u0209\62\0\1\u020a\134\0\1\u020b"+
    "\71\0\1\u020c\74\0\1\u020d\67\0\1\u020e\110\0\1\u020f"+
    "\70\0\1\u0210\70\0\1\u0211\100\0\1\u0212\45\0\1\u0213"+
    "\134\0\1\u0214\71\0\1\u0215\103\0\1\u0216\70\0\1\u0217"+
    "\100\0\1\u0218\71\0\1\u0219\67\0\1\u021a\103\0\1\u021b"+
    "\100\0\1\u021c\64\0\1\u021d\74\0\1\u021e\106\0\1\u021f"+
    "\75\0\1\u0220\65\0\1\u0221\101\0\1\u0222\77\0\1\u0223"+
    "\67\0\1\u0224\76\0\1\u0225\47\0\1\u0226\123\0\1\u0227"+
    "\107\0\1\u0228\62\0\1\u0229\114\0\1\u022a\72\0\1\u022b"+
    "\66\0\1\u022c\2\0\1\u022d\2\0\1\u022e\61\0\1\u022f"+
    "\51\0\1\u0230\130\0\1\u0231\71\0\1\u0232\72\0\1\u0233"+
    "\102\0\1\u0234\75\0\1\u0235\74\0\1\u0236\106\0\1\u0237"+
    "\105\0\1\u0238\60\0\1\u0239\70\0\1\u023a\107\0\1\u023b"+
    "\34\0\1\u023c\136\0\1\u023d\66\0\1\u023e\72\0\1\u023f"+
    "\75\0\1\u0240\73\0\1\u0241\112\0\1\u0242\102\0\1\u0243"+
    "\52\0\1\u0244\100\0\1\u0245\107\0\1\u0246\73\0\1\u0247"+
    "\70\0\1\u0248\100\0\1\u0249\65\0\1\u024a\50\0\1\u024b"+
    "\127\0\1\u024c\116\0\1\u024d\46\0\1\u024e\115\0\1\u024f"+
    "\61\0\1\u0250\45\0\1\u0251\75\0\1\u0252\124\0\1\u0253"+
    "\107\0\1\u0254\72\0\1\u0255\76\0\1\u0256\65\0\1\u0257"+
    "\72\0\1\u0258\76\0\1\u0259\50\0\1\u025a\136\0\1\u025b"+
    "\66\0\1\u025c\61\0\1\u025d\110\0\1\u025e\44\0\1\u025f"+
    "\135\0\1\u0260\62\0\1\u0261\105\0\1\u0262\77\0\1\u0263"+
    "\73\0\1\u0264\67\0\1\u0265\46\0\1\u0266\135\0\1\u0267"+
    "\67\0\1\u0268\104\0\1\u0269\34\0\1\u026a\132\0\1\u026b"+
    "\103\0\1\u026c\70\0\1\u026d\66\0\1\u026e\73\0\1\u026f"+
    "\75\0\1\u0270\111\0\1\u0271\61\0\1\u0272\74\0\1\u0273"+
    "\100\0\1\u0274\114\0\1\u0275\71\0\1\u0276\64\0\1\u0277"+
    "\105\0\1\u0278\62\0\1\u0279\77\0\1\u027a\72\0\1\u027b"+
    "\74\0\1\u027c\104\0\1\u027d\74\0\1\u027e\103\0\1\u027f"+
    "\62\0\1\u0280\77\0\1\u0281\73\0\1\u0282\114\0\1\u0283"+
    "\56\0\1\u0284\75\0\1\u0285\114\0\1\u0286\30\0\1\u0287"+
    "\144\0\1\u0288\70\0\1\u0289\70\0\1\u028a\75\0\1\u028b"+
    "\41\0\1\u028c\134\0\1\u028d\100\0\1\u028e\64\0\1\u028f"+
    "\104\0\1\u0290\35\0\1\u0291\131\0\1\u0292\75\0\1\u0293"+
    "\41\0\1\u0294\136\0\1\u0295\107\0\1\u0296\51\0\1\u0297"+
    "\65\0\1\u0298\112\0\1\u0299\73\0\1\u029a\100\0\1\u029b"+
    "\66\0\1\u029c\101\0\1\u029d\70\0\1\u029e\75\0\1\u029f"+
    "\107\0\1\u02a0\101\0\1\u02a1\60\0\1\u02a2\104\0\1\u02a3"+
    "\65\0\1\u02a4\100\0\1\u02a5\74\0\1\u02a6\75\0\1\u02a7"+
    "\101\0\1\u02a8\1\0\1\u02a9\2\0\1\u02aa\3\0\1\u02ab"+
    "\56\0\1\u02ac\120\0\1\u02ad\57\0\1\u02ae\100\0\1\u02af"+
    "\65\0\1\u02b0\77\0\1\u02b1\74\0\1\u02b2\74\0\1\u02b3"+
    "\112\0\1\u02b4\61\0\1\u02b5\76\0\1\u02b6\73\0\1\u02b7"+
    "\103\0\1\u02b8\67\0\1\u02b9\102\0\1\u02ba\105\0\1\u02bb"+
    "\73\0\1\u02bc\65\0\1\u02bd\75\0\1\u02be\73\0\1\u02bf"+
    "\107\0\1\u02c0\70\0\1\u02c1\74\0\1\u02c2\76\0\1\u02c3"+
    "\103\0\1\u02c4\34\0\1\u02c5\151\0\1\u02c6\55\0\1\u02c7"+
    "\66\0\1\u02c8\124\0\1\u02c9\50\0\1\u02ca\73\0\1\u02cb"+
    "\100\0\1\u02cc\45\0\1\u02cd\75\0\1\u02ce\143\0\1\u02cf"+
    "\56\0\1\u02d0\116\0\1\u02d1\76\0\1\u02d2\65\0\1\u02d3"+
    "\73\0\1\u02d4\63\0\1\u02d5\121\0\1\u02d6\66\0\1\u02d7"+
    "\75\0\1\u02d8\33\0\1\u02d9\122\0\1\u02da\74\0\1\u02db"+
    "\112\0\1\u02dc\61\0\1\u02dd\77\0\1\u02de\34\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  9,  9,  9,  9,  1,  9,  9,  1,  9,  9, 
     9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  0,  0,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0, 
     9,  0,  0,  0,  9,  0,  0,  0,  1,  0,  9,  0,  0,  0,  1,  0, 
     0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  9,  0,  9,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  9,  9, 
     9,  9,  9,  9,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  9,  0, 
     1,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0, 
     0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  9,  0,  0,  0, 
     0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  0,  9,  0,  9,  9,  0,  0,  0,  0,  1,  0, 
     0,  0,  0,  0,  9,  0,  9,  0,  0,  0,  0,  0,  9,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  1,  0,  0,  0,  0,  0,  0, 
     0,  9,  0,  0,  9,  0,  9,  0,  0,  0,  0,  9,  9,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  9, 
     0,  0,  9,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  1,  0,  0,  1,  0,  0,  0,  1,  1,  0,  9,  0,  0,  0,  0, 
     0,  0,  0,  9,  0,  9,  0,  9,  0,  0,  9,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  9,  9,  9,  0,  0,  0,  0,  0,  0,  9,  0,  9,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  9,  9,  0,  0,  0,  0,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  1,  0,  0,  9,  0,  0, 
     0,  0,  1,  0,  1,  0,  9,  0,  0,  0,  0,  0,  0,  0,  9,  9, 
     0,  0,  9,  9,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  9,  9,  0,  9,  9,  9,  9,  9,  0,  0, 
     9,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  9,  0, 
     0,  0,  9,  0,  0,  9,  0,  0,  0,  9,  9,  0,  9,  0,  0,  0, 
     9,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  0,  1,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  9,  0,  9,  0,  0,  0,  0,  9,  0,  0, 
     9,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  1,  0,  9,  0,  9,  9,  9, 
     9,  9,  0,  0,  9,  9,  0,  0,  9,  9,  0,  0,  0,  9,  9,  0, 
     9,  9,  0,  9,  0,  0,  9,  0,  0,  9,  9,  0,  0,  0,  9,  0, 
     9,  0,  0,  9,  9,  9,  0,  0,  0,  9,  9,  9,  9,  9,  0,  0, 
     0,  9,  0,  9,  9,  0,  0,  9,  0,  0,  0,  0,  0,  9,  0,  9, 
     9,  0,  0,  0,  9,  9,  0,  0,  9,  9,  9,  0,  0,  0,  0,  0, 
     0,  0,  9,  0,  9,  0,  9,  9,  9,  9,  0,  0,  9,  9,  9,  9, 
     9,  9,  9,  9,  0,  9,  9,  0,  0,  0,  0,  0,  0,  9,  9,  9, 
     9,  0,  0,  9,  0,  0,  9,  0,  9,  0,  9,  0,  0,  0,  0,  0, 
     0,  9,  0,  0,  9,  0,  9,  9,  9,  0,  9,  0,  0,  0,  9,  9, 
     0,  0,  9,  0,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[33914];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2316) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 663: 
          {  return symbolFactory.newSymbol("DOCTYPE", DOCTYPE); }
        case 735: break;
        case 660: 
          {  return symbolFactory.newSymbol("HEADERS", HEADERS);  }
        case 736: break;
        case 658: 
          {  return symbolFactory.newSymbol("JUSTIFY", JUSTIFY);  }
        case 737: break;
        case 650: 
          {  return symbolFactory.newSymbol("SUMMARY", SUMMARY);  }
        case 738: break;
        case 649: 
          {  return symbolFactory.newSymbol("STANDBY", STANDBY); }
        case 739: break;
        case 648: 
          {  return symbolFactory.newSymbol("ADDRESS", ADDRESS); }
        case 740: break;
        case 645: 
          {  return symbolFactory.newSymbol("ACRONYM", ACRONYM); }
        case 741: break;
        case 644: 
          {  return symbolFactory.newSymbol("ARCHIVE", ARCHIVE); }
        case 742: break;
        case 640: 
          {  return symbolFactory.newSymbol("DEFAULT", DEFAULT); }
        case 743: break;
        case 639: 
          {  return symbolFactory.newSymbol("DECLARE", DECLARE); }
        case 744: break;
        case 637: 
          {  return symbolFactory.newSymbol("ONKEYUP", ONKEYUP); }
        case 745: break;
        case 631: 
          {  return symbolFactory.newSymbol("ONFOCUS", ONFOCUS); }
        case 746: break;
        case 628: 
          {  return symbolFactory.newSymbol("ONCLICK", ONCLICK); }
        case 747: break;
        case 627: 
          {  return symbolFactory.newSymbol("ONRESET", ONRESET);  }
        case 748: break;
        case 625: 
          {  return symbolFactory.newSymbol("PROFILE", PROFILE); }
        case 749: break;
        case 621: 
          {  return symbolFactory.newSymbol("CHARSET", CHARSET); }
        case 750: break;
        case 620: 
          {  return symbolFactory.newSymbol("CHAROFF", CHAROFF);  }
        case 751: break;
        case 618: 
          {  return symbolFactory.newSymbol("CHECKED", CHECKED);  }
        case 752: break;
        case 617: 
          {  return symbolFactory.newSymbol("CAPTION", CAPTION);  }
        case 753: break;
        case 613: 
          {  return symbolFactory.newSymbol("COLSPAN", COLSPAN);  }
        case 754: break;
        case 611: 
          {  return symbolFactory.newSymbol("CLASSID", CLASSID); }
        case 755: break;
        case 608: 
          {  return symbolFactory.newSymbol("ENCTYPE", ENCTYPE);  }
        case 756: break;
        case 606: 
          {  return symbolFactory.newSymbol("ROWSPAN", ROWSPAN);  }
        case 757: break;
        case 26: 
          {  return symbolFactory.newSymbol("P", P); }
        case 758: break;
        case 24: 
          {  return symbolFactory.newSymbol("I", I); }
        case 759: break;
        case 30: 
          {  return symbolFactory.newSymbol("A", A); }
        case 760: break;
        case 37: 
          {  return symbolFactory.newSymbol("B", B); }
        case 761: break;
        case 41: 
          {  return symbolFactory.newSymbol("Q", Q); }
        case 762: break;
        case 6: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 763: break;
        case 9: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 764: break;
        case 414: 
          {  return symbolFactory.newSymbol("RESET", RESET);  }
        case 765: break;
        case 415: 
          {  return symbolFactory.newSymbol("RIGHT", RIGHT);  }
        case 766: break;
        case 418: 
          {  return symbolFactory.newSymbol("RADIO", RADIO);  }
        case 767: break;
        case 419: 
          {  return symbolFactory.newSymbol("RULES", RULES);  }
        case 768: break;
        case 425: 
          {  return symbolFactory.newSymbol("CLASS", CLASS); }
        case 769: break;
        case 438: 
          {  return symbolFactory.newSymbol("TITLE", TITLE); }
        case 770: break;
        case 439: 
          {  return symbolFactory.newSymbol("TFOOT", TFOOT);  }
        case 771: break;
        case 441: 
          {  return symbolFactory.newSymbol("TABLE", TABLE); }
        case 772: break;
        case 442: 
          {  return symbolFactory.newSymbol("TBODY", TBODY);  }
        case 773: break;
        case 443: 
          {  return symbolFactory.newSymbol("THEAD", THEAD);  }
        case 774: break;
        case 444: 
          {  return symbolFactory.newSymbol("INPUT", INPUT); }
        case 775: break;
        case 445: 
          {  return symbolFactory.newSymbol("ISMAP", ISMAP); }
        case 776: break;
        case 448: 
          {  return symbolFactory.newSymbol("LABEL", LABEL); }
        case 777: break;
        case 450: 
          {  return symbolFactory.newSymbol("PARAM", PARAM); }
        case 778: break;
        case 469: 
          {  return symbolFactory.newSymbol("FRAME", FRAME);  }
        case 779: break;
        case 476: 
          {  return symbolFactory.newSymbol("ALIGN", ALIGN);  }
        case 780: break;
        case 478: 
          {  return symbolFactory.newSymbol("ABOVE", ABOVE);  }
        case 781: break;
        case 482: 
          {  return symbolFactory.newSymbol("SCOPE", SCOPE);  }
        case 782: break;
        case 485: 
          {  return symbolFactory.newSymbol("STYLE", STYLE); }
        case 783: break;
        case 489: 
          {  return symbolFactory.newSymbol("SMALL", SMALL); }
        case 784: break;
        case 490: 
          {  return symbolFactory.newSymbol("SHAPE", SHAPE); }
        case 785: break;
        case 492: 
          {  return symbolFactory.newSymbol("XMLNS", XMLNS); }
        case 786: break;
        case 496: 
          {  return symbolFactory.newSymbol("MEDIA", MEDIA); }
        case 787: break;
        case 500: 
          {  return symbolFactory.newSymbol("BELOW", BELOW);  }
        case 788: break;
        case 506: 
          {  return symbolFactory.newSymbol("WIDTH", WIDTH); }
        case 789: break;
        case 508: 
          {  return symbolFactory.newSymbol("VALUE", VALUE); }
        case 790: break;
        case 2: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 25: 
        case 27: 
        case 28: 
        case 29: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 38: 
        case 39: 
        case 40: 
        case 42: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 791: break;
        case 724: 
          {  return symbolFactory.newSymbol("BLOCKQUOTE", BLOCKQUOTE); }
        case 792: break;
        case 722: 
          {  return symbolFactory.newSymbol("ONKEYPRESS", ONKEYPRESS); }
        case 793: break;
        case 719: 
          {  return symbolFactory.newSymbol("ONMOUSEOUT", ONMOUSEOUT); }
        case 794: break;
        case 718: 
          {  return symbolFactory.newSymbol("ONDBLCLICK", ONDBLCLICK); }
        case 795: break;
        case 273: 
          {  return symbolFactory.newSymbol("VAR", VAR); }
        case 796: break;
        case 268: 
          {  return symbolFactory.newSymbol("BDO", BDO); }
        case 797: break;
        case 267: 
          {  return symbolFactory.newSymbol("BOX", BOX);  }
        case 798: break;
        case 262: 
          {  return symbolFactory.newSymbol("BIG", BIG); }
        case 799: break;
        case 260: 
          {  return symbolFactory.newSymbol("KBD", KBD); }
        case 800: break;
        case 257: 
          {  return symbolFactory.newSymbol("MAP", MAP); }
        case 801: break;
        case 249: 
          {  return symbolFactory.newSymbol("SUB", SUB); }
        case 802: break;
        case 247: 
          {  return symbolFactory.newSymbol("SUP", SUP); }
        case 803: break;
        case 236: 
          {  return symbolFactory.newSymbol("SRC", SRC); }
        case 804: break;
        case 230: 
          {  return symbolFactory.newSymbol("ALL", ALL);  }
        case 805: break;
        case 228: 
          {  return symbolFactory.newSymbol("ALT", ALT); }
        case 806: break;
        case 222: 
          {  return symbolFactory.newSymbol("FOR", FOR);  }
        case 807: break;
        case 217: 
          {  return symbolFactory.newSymbol("DFN", DFN); }
        case 808: break;
        case 216: 
          {  return symbolFactory.newSymbol("DIV", DIV); }
        case 809: break;
        case 214: 
          {  return symbolFactory.newSymbol("DIR", DIR); }
        case 810: break;
        case 212: 
          {  return symbolFactory.newSymbol("DEL", DEL); }
        case 811: break;
        case 196: 
          {  return symbolFactory.newSymbol("PRE", PRE); }
        case 812: break;
        case 195: 
          {  return symbolFactory.newSymbol("LHS", LHS);  }
        case 813: break;
        case 188: 
          {  return symbolFactory.newSymbol("IMG", IMG); }
        case 814: break;
        case 186: 
          {  return symbolFactory.newSymbol("INS", INS); }
        case 815: break;
        case 179: 
          {  return symbolFactory.newSymbol("TOP", TOP);  }
        case 816: break;
        case 171: 
          {  return symbolFactory.newSymbol("COL", COL);  }
        case 817: break;
        case 163: 
          {  return symbolFactory.newSymbol("RHS", RHS);  }
        case 818: break;
        case 160: 
          {  return symbolFactory.newSymbol("ROW", ROW);  }
        case 819: break;
        case 158: 
          {  return symbolFactory.newSymbol("REV", REV); }
        case 820: break;
        case 155: 
          {  return symbolFactory.newSymbol("REL", REL); }
        case 821: break;
        case 698: 
          {  return symbolFactory.newSymbol("HREFLANG", HREFLANG); }
        case 822: break;
        case 696: 
          {  return symbolFactory.newSymbol("BASELINE", BASELINE);  }
        case 823: break;
        case 694: 
          {  return symbolFactory.newSymbol("MULTIPLE", MULTIPLE);  }
        case 824: break;
        case 691: 
          {  return symbolFactory.newSymbol("XML_LANG", XML_LANG); }
        case 825: break;
        case 688: 
          {  return symbolFactory.newSymbol("FIELDSET", FIELDSET); }
        case 826: break;
        case 687: 
          {  return symbolFactory.newSymbol("DATETIME", DATETIME); }
        case 827: break;
        case 686: 
          {  return symbolFactory.newSymbol("DISABLED", DISABLED);  }
        case 828: break;
        case 685: 
          {  return symbolFactory.newSymbol("OPTGROUP", OPTGROUP);  }
        case 829: break;
        case 678: 
          {  return symbolFactory.newSymbol("ONSUBMIT", ONSUBMIT);  }
        case 830: break;
        case 677: 
          {  return symbolFactory.newSymbol("ONSELECT", ONSELECT);  }
        case 831: break;
        case 675: 
          {  return symbolFactory.newSymbol("ONCHANGE", ONCHANGE);  }
        case 832: break;
        case 674: 
          {  return symbolFactory.newSymbol("PASSWORD", PASSWORD);  }
        case 833: break;
        case 673: 
          {  return symbolFactory.newSymbol("LONGDESC", LONGDESC); }
        case 834: break;
        case 672: 
          {  return symbolFactory.newSymbol("TABINDEX", TABINDEX); }
        case 835: break;
        case 671: 
          {  return symbolFactory.newSymbol("TEXTAREA", TEXTAREA); }
        case 836: break;
        case 670: 
          {  return symbolFactory.newSymbol("CODEBASE", CODEBASE); }
        case 837: break;
        case 669: 
          {  return symbolFactory.newSymbol("CODETYPE", CODETYPE); }
        case 838: break;
        case 668: 
          {  return symbolFactory.newSymbol("COLGROUP", COLGROUP);  }
        case 839: break;
        case 665: 
          {  return symbolFactory.newSymbol("ROWGROUP", ROWGROUP);  }
        case 840: break;
        case 664: 
          {  return symbolFactory.newSymbol("READONLY", READONLY);  }
        case 841: break;
        case 662: 
          {  return symbolFactory.newSymbol("NOSCRIPT", NOSCRIPT); }
        case 842: break;
        case 619: 
          {  return symbolFactory.newSymbol("CHECKBOX", CHECKBOX);  }
        case 843: break;
        case 13: 
          {  return symbolFactory.newSymbol("OPEN_TAG", OPEN_TAG); }
        case 844: break;
        case 729: 
          {  return symbolFactory.newSymbol("ONMOUSEMOVE", ONMOUSEMOVE); }
        case 845: break;
        case 728: 
          {  return symbolFactory.newSymbol("ONMOUSEDOWN", ONMOUSEDOWN); }
        case 846: break;
        case 727: 
          {  return symbolFactory.newSymbol("CELLSPACING", CELLSPACING);  }
        case 847: break;
        case 726: 
          {  return symbolFactory.newSymbol("CELLPADDING", CELLPADDING);  }
        case 848: break;
        case 17: 
          {  return symbolFactory.newSymbol("OPEN_SYMBOL", OPEN_SYMBOL); }
        case 849: break;
        case 15: 
          {  return symbolFactory.newSymbol("ATTR_ASSIGN", ATTR_ASSIGN); }
        case 850: break;
        case 294: 
          {  return symbolFactory.newSymbol("ROWS", ROWS);  }
        case 851: break;
        case 290: 
          {  return symbolFactory.newSymbol("RECT", RECT); }
        case 852: break;
        case 287: 
          {  return symbolFactory.newSymbol("NAME", NAME); }
        case 853: break;
        case 284: 
          {  return symbolFactory.newSymbol("NONE", NONE);  }
        case 854: break;
        case 7: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 855: break;
        case 8: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 856: break;
        case 302: 
          {  return symbolFactory.newSymbol("CITE", CITE); }
        case 857: break;
        case 305: 
          {  return symbolFactory.newSymbol("COLS", COLS);  }
        case 858: break;
        case 308: 
          {  return symbolFactory.newSymbol("CODE", CODE); }
        case 859: break;
        case 312: 
          {  return symbolFactory.newSymbol("CHAR", CHAR);  }
        case 860: break;
        case 313: 
          {  return symbolFactory.newSymbol("TEXT", TEXT);  }
        case 861: break;
        case 315: 
          {  return symbolFactory.newSymbol("TYPE", TYPE); }
        case 862: break;
        case 323: 
          {  return symbolFactory.newSymbol("LEFT", LEFT);  }
        case 863: break;
        case 325: 
          {  return symbolFactory.newSymbol("LINK", LINK); }
        case 864: break;
        case 327: 
          {  return symbolFactory.newSymbol("LANG", LANG); }
        case 865: break;
        case 330: 
          {  return symbolFactory.newSymbol("POLY", POLY); }
        case 866: break;
        case 350: 
          {  return symbolFactory.newSymbol("DATA", DATA); }
        case 867: break;
        case 353: 
          {  return symbolFactory.newSymbol("FILE", FILE);  }
        case 868: break;
        case 354: 
          {  return symbolFactory.newSymbol("FORM", FORM); }
        case 869: break;
        case 355: 
          {  return symbolFactory.newSymbol("AREA", AREA); }
        case 870: break;
        case 362: 
          {  return symbolFactory.newSymbol("AXIS", AXIS);  }
        case 871: break;
        case 364: 
          {  return symbolFactory.newSymbol("ABBR", ABBR); }
        case 872: break;
        case 373: 
          {  return symbolFactory.newSymbol("SIZE", SIZE);  }
        case 873: break;
        case 374: 
          {  return symbolFactory.newSymbol("SPAN", SPAN);  }
        case 874: break;
        case 375: 
          {  return symbolFactory.newSymbol("SAMP", SAMP); }
        case 875: break;
        case 383: 
          {  return symbolFactory.newSymbol("META", META); }
        case 876: break;
        case 393: 
          {  return symbolFactory.newSymbol("BODY", BODY); }
        case 877: break;
        case 394: 
          {  return symbolFactory.newSymbol("BASE", BASE); }
        case 878: break;
        case 397: 
          {  return symbolFactory.newSymbol("VOID", VOID);  }
        case 879: break;
        case 402: 
          {  return symbolFactory.newSymbol("HREF", HREF); }
        case 880: break;
        case 404: 
          {  return symbolFactory.newSymbol("HEAD", HEAD); }
        case 881: break;
        case 406: 
          {  return symbolFactory.newSymbol("HTML", HTML); }
        case 882: break;
        case 725: 
          {  return symbolFactory.newSymbol("HTTPEQUIV", HTTPEQUIV); }
        case 883: break;
        case 714: 
          {  return symbolFactory.newSymbol("VALUETYPE", VALUETYPE); }
        case 884: break;
        case 712: 
          {  return symbolFactory.newSymbol("MAXLENGTH", MAXLENGTH);  }
        case 885: break;
        case 711: 
          {  return symbolFactory.newSymbol("XML_SPACE", XML_SPACE); }
        case 886: break;
        case 710: 
          {  return symbolFactory.newSymbol("ACCESSKEY", ACCESSKEY); }
        case 887: break;
        case 708: 
          {  return symbolFactory.newSymbol("ONKEYDOWN", ONKEYDOWN); }
        case 888: break;
        case 705: 
          {  return symbolFactory.newSymbol("ONMOUSEUP", ONMOUSEUP); }
        case 889: break;
        case 14: 
          {  return symbolFactory.newSymbol("CLOSE_TAG", CLOSE_TAG); }
        case 890: break;
        case 16: 
          {  return symbolFactory.newSymbol("QUATATION_MARKS", QUATATION_MARKS); }
        case 891: break;
        case 612: 
          {  return symbolFactory.newSymbol("CONTENT", SCHEME); }
        case 892: break;
        case 602: 
          {  return symbolFactory.newSymbol("HSIDES", HSIDES);  }
        case 893: break;
        case 601: 
          {  return symbolFactory.newSymbol("HIDDEN", HIDDEN);  }
        case 894: break;
        case 598: 
          {  return symbolFactory.newSymbol("HEIGHT", HEIGHT); }
        case 895: break;
        case 595: 
          {  return symbolFactory.newSymbol("VSIDES", VSIDES);  }
        case 896: break;
        case 593: 
          {  return symbolFactory.newSymbol("VALIGN", VALIGN);  }
        case 897: break;
        case 592: 
          {  return symbolFactory.newSymbol("BUTTON", BUTTON); }
        case 898: break;
        case 590: 
          {  return symbolFactory.newSymbol("BOTTOM", BOTTOM);  }
        case 899: break;
        case 589: 
          {  return symbolFactory.newSymbol("BORDER", BORDER);  }
        case 900: break;
        case 12: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 901: break;
        case 11: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 902: break;
        case 10: 
          {  return symbolFactory.newSymbol("UMINUS", UMINUS);  }
        case 903: break;
        case 518: 
          {  return symbolFactory.newSymbol("NOHREF", NOHREF); }
        case 904: break;
        case 520: 
          {  return symbolFactory.newSymbol("PUBLIC", PUBLIC); }
        case 905: break;
        case 525: 
          {  return symbolFactory.newSymbol("CENTER", CENTER);  }
        case 906: break;
        case 528: 
          {  return symbolFactory.newSymbol("CIRCLE", CIRCLE); }
        case 907: break;
        case 533: 
          {  return symbolFactory.newSymbol("COORDS", COORDS); }
        case 908: break;
        case 543: 
          {  return symbolFactory.newSymbol("LEGEND", LEGEND);  }
        case 909: break;
        case 558: 
          {  return symbolFactory.newSymbol("ONBLUR", ONBLUR); }
        case 910: break;
        case 559: 
          {  return symbolFactory.newSymbol("OPTION", OPTION);  }
        case 911: break;
        case 561: 
          {  return symbolFactory.newSymbol("OBJECT", OBJECT); }
        case 912: break;
        case 569: 
          {  return symbolFactory.newSymbol("ACCEPT", ACCEPT);  }
        case 913: break;
        case 571: 
          {  return symbolFactory.newSymbol("ACTION", ACTION); }
        case 914: break;
        case 573: 
          {  return symbolFactory.newSymbol("USEMAP", USEMAP); }
        case 915: break;
        case 574: 
          {  return symbolFactory.newSymbol("SELECT", SELECT); }
        case 916: break;
        case 575: 
          {  return symbolFactory.newSymbol("SCRIPT", SCRIPT); }
        case 917: break;
        case 576: 
          {  return symbolFactory.newSymbol("SCHEME", SCHEME); }
        case 918: break;
        case 577: 
          {  return symbolFactory.newSymbol("STRONG", STRONG); }
        case 919: break;
        case 580: 
          {  return symbolFactory.newSymbol("SUBMIT", SUBMIT);  }
        case 920: break;
        case 581: 
          {  return symbolFactory.newSymbol("GROUPS", GROUPS);  }
        case 921: break;
        case 584: 
          {  return symbolFactory.newSymbol("METHOD", METHOD); }
        case 922: break;
        case 585: 
          {  return symbolFactory.newSymbol("MIDDLE", MIDDLE);  }
        case 923: break;
        case 45: 
          {  return symbolFactory.newSymbol("OPEN_CLOSING_TAG", OPEN_CLOSING_TAG); }
        case 924: break;
        case 733: 
          {  return symbolFactory.newSymbol("ACCEPT-CHARSET", ACCEPT_CHARSET);  }
        case 925: break;
        case 147: 
          {  return symbolFactory.newSymbol("H6", H6); }
        case 926: break;
        case 146: 
          {  return symbolFactory.newSymbol("H5", H5); }
        case 927: break;
        case 145: 
          {  return symbolFactory.newSymbol("H4", H4); }
        case 928: break;
        case 144: 
          {  return symbolFactory.newSymbol("H3", H3); }
        case 929: break;
        case 143: 
          {  return symbolFactory.newSymbol("H2", H2); }
        case 930: break;
        case 142: 
          {  return symbolFactory.newSymbol("H1", H1); }
        case 931: break;
        case 55: 
          {  return symbolFactory.newSymbol("EM", EM); }
        case 932: break;
        case 62: 
          {  return symbolFactory.newSymbol("TR", TR);  }
        case 933: break;
        case 64: 
          {  return symbolFactory.newSymbol("TT", TT); }
        case 934: break;
        case 68: 
          {  return symbolFactory.newSymbol("TD", TD);  }
        case 935: break;
        case 72: 
          {  return symbolFactory.newSymbol("TH", TH);  }
        case 936: break;
        case 74: 
          {  return symbolFactory.newSymbol("ID", ID); }
        case 937: break;
        case 78: 
          {  return symbolFactory.newSymbol("LI", LI); }
        case 938: break;
        case 86: 
          {  return symbolFactory.newSymbol("OL", OL); }
        case 939: break;
        case 90: 
          {  return symbolFactory.newSymbol("DT", DT); }
        case 940: break;
        case 92: 
          {  return symbolFactory.newSymbol("DL", DL); }
        case 941: break;
        case 93: 
          {  return symbolFactory.newSymbol("DD", DD); }
        case 942: break;
        case 105: 
          {  return symbolFactory.newSymbol("UL", UL); }
        case 943: break;
        case 124: 
          {  return symbolFactory.newSymbol("BR", BR); }
        case 944: break;
        case 137: 
          {  return symbolFactory.newSymbol("HR", HR); }
        case 945: break;
        case 5: 
          {  return symbolFactory.newSymbol("NUMBER", NUMBER, Integer.parseInt(yytext()));  }
        case 946: break;
        case 3: 
        case 4: 
          {                                }
        case 947: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
