/* The following code was generated by JFlex 1.3.5 on 11/3/24, 12:08 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/3/24, 12:08 PM from the specification file
 * <tt>file:/C:/Users/anina/OneDrive/Desktop/Homework Faculty/xhtml/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\16\0\4\0\1\3\1\23"+
    "\1\20\1\0\1\0\1\0\1\21\1\0\1\13\1\14\1\11\1\7"+
    "\1\0\1\10\1\5\1\6\1\4\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\3\4\1\60\1\22\1\15\1\17\1\16\2\0\1\5\1\34"+
    "\1\26\1\24\1\32\3\5\1\36\2\5\1\35\2\5\1\25\1\31"+
    "\3\5\1\27\1\33\3\5\1\30\1\5\4\0\1\0\1\0\1\52"+
    "\1\62\1\41\1\50\1\40\1\51\1\55\1\67\1\43\1\65\1\61"+
    "\1\44\1\57\1\12\1\46\1\45\1\66\1\37\1\54\1\42\1\53"+
    "\1\64\1\63\1\56\1\47\1\76\4\0\41\0\2\0\4\0\4\0"+
    "\1\0\2\0\1\0\7\0\1\0\4\0\1\0\5\0\27\0\1\0"+
    "\37\0\1\0\u01ca\0\4\0\14\0\16\0\5\0\7\0\1\0\1\0"+
    "\1\0\21\0\160\0\5\0\1\0\2\0\2\0\4\0\1\0\1\0"+
    "\6\0\1\0\1\0\3\0\1\0\1\0\1\0\24\0\1\0\123\0"+
    "\1\0\213\0\1\0\5\0\2\0\246\0\1\0\46\0\2\0\1\0"+
    "\6\0\51\0\6\0\1\0\1\0\55\0\1\0\1\0\1\0\2\0"+
    "\1\0\2\0\1\0\1\0\10\0\33\0\4\0\4\0\15\0\6\0"+
    "\5\0\1\0\4\0\13\0\1\0\1\0\3\0\53\0\37\0\4\0"+
    "\2\0\1\0\143\0\1\0\1\0\10\0\1\0\6\0\2\0\2\0"+
    "\1\0\4\0\2\0\12\0\3\0\2\0\1\0\17\0\1\0\1\0"+
    "\1\0\36\0\33\0\2\0\131\0\13\0\1\0\16\0\12\0\41\0"+
    "\11\0\2\0\4\0\1\0\2\0\1\0\30\0\4\0\1\0\11\0"+
    "\1\0\3\0\1\0\5\0\22\0\31\0\3\0\4\0\13\0\5\0"+
    "\30\0\1\0\6\0\1\0\2\0\6\0\10\0\52\0\72\0\66\0"+
    "\3\0\1\0\22\0\1\0\7\0\12\0\2\0\2\0\12\0\1\0"+
    "\20\0\3\0\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0"+
    "\1\0\1\0\3\0\4\0\2\0\1\0\1\0\7\0\2\0\2\0"+
    "\2\0\3\0\1\0\10\0\1\0\4\0\2\0\1\0\3\0\2\0"+
    "\2\0\12\0\4\0\7\0\2\0\1\0\1\0\2\0\3\0\1\0"+
    "\6\0\4\0\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0"+
    "\2\0\1\0\2\0\2\0\1\0\1\0\5\0\4\0\2\0\2\0"+
    "\3\0\3\0\1\0\7\0\4\0\1\0\1\0\7\0\14\0\3\0"+
    "\1\0\13\0\3\0\1\0\11\0\1\0\3\0\1\0\26\0\1\0"+
    "\7\0\1\0\2\0\1\0\5\0\2\0\1\0\1\0\10\0\1\0"+
    "\3\0\1\0\3\0\2\0\1\0\17\0\2\0\2\0\2\0\12\0"+
    "\1\0\1\0\7\0\1\0\6\0\1\0\3\0\1\0\10\0\2\0"+
    "\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0\2\0"+
    "\1\0\1\0\7\0\2\0\2\0\2\0\3\0\7\0\3\0\4\0"+
    "\2\0\1\0\3\0\2\0\2\0\12\0\1\0\1\0\20\0\1\0"+
    "\1\0\1\0\6\0\3\0\3\0\1\0\4\0\3\0\2\0\1\0"+
    "\1\0\1\0\2\0\3\0\2\0\3\0\3\0\3\0\14\0\4\0"+
    "\5\0\3\0\3\0\1\0\4\0\2\0\1\0\6\0\1\0\16\0"+
    "\12\0\11\0\1\0\6\0\5\0\10\0\1\0\3\0\1\0\27\0"+
    "\1\0\20\0\2\0\1\0\1\0\7\0\1\0\3\0\1\0\4\0"+
    "\7\0\2\0\1\0\3\0\2\0\1\0\2\0\2\0\2\0\2\0"+
    "\12\0\20\0\1\0\3\0\1\0\10\0\1\0\3\0\1\0\27\0"+
    "\1\0\12\0\1\0\5\0\2\0\1\0\1\0\7\0\1\0\3\0"+
    "\1\0\4\0\7\0\2\0\6\0\2\0\1\0\2\0\2\0\2\0"+
    "\12\0\1\0\2\0\1\0\14\0\4\0\11\0\1\0\3\0\1\0"+
    "\51\0\2\0\1\0\7\0\1\0\3\0\1\0\4\0\1\0\5\0"+
    "\3\0\1\0\7\0\3\0\2\0\2\0\12\0\12\0\6\0\1\0"+
    "\3\0\1\0\22\0\3\0\30\0\1\0\11\0\1\0\1\0\2\0"+
    "\7\0\3\0\1\0\4\0\6\0\1\0\1\0\1\0\10\0\6\0"+
    "\12\0\2\0\2\0\15\0\60\0\1\0\2\0\7\0\4\0\10\0"+
    "\10\0\1\0\12\0\47\0\2\0\1\0\1\0\1\0\5\0\1\0"+
    "\30\0\1\0\1\0\1\0\12\0\1\0\2\0\11\0\1\0\2\0"+
    "\5\0\1\0\1\0\1\0\7\0\1\0\12\0\2\0\4\0\40\0"+
    "\1\0\27\0\2\0\6\0\12\0\13\0\1\0\1\0\1\0\1\0"+
    "\1\0\4\0\2\0\10\0\1\0\44\0\4\0\24\0\1\0\2\0"+
    "\5\0\13\0\1\0\44\0\11\0\1\0\71\0\53\0\24\0\1\0"+
    "\12\0\6\0\6\0\4\0\4\0\3\0\1\0\3\0\2\0\7\0"+
    "\3\0\4\0\15\0\14\0\1\0\17\0\2\0\46\0\1\0\1\0"+
    "\5\0\1\0\2\0\53\0\1\0\u014d\0\1\0\4\0\2\0\7\0"+
    "\1\0\1\0\1\0\4\0\2\0\51\0\1\0\4\0\2\0\41\0"+
    "\1\0\4\0\2\0\7\0\1\0\1\0\1\0\4\0\2\0\17\0"+
    "\1\0\71\0\1\0\4\0\2\0\103\0\2\0\3\0\40\0\20\0"+
    "\20\0\126\0\2\0\6\0\3\0\u026c\0\2\0\21\0\1\0\32\0"+
    "\5\0\113\0\3\0\13\0\7\0\22\0\4\0\11\0\23\0\3\0"+
    "\13\0\22\0\2\0\14\0\15\0\1\0\3\0\1\0\2\0\14\0"+
    "\64\0\40\0\3\0\1\0\3\0\2\0\1\0\2\0\12\0\41\0"+
    "\17\0\6\0\131\0\7\0\5\0\2\0\42\0\1\0\1\0\5\0"+
    "\106\0\12\0\37\0\1\0\14\0\4\0\14\0\12\0\12\0\36\0"+
    "\2\0\5\0\13\0\54\0\4\0\32\0\6\0\12\0\46\0\27\0"+
    "\5\0\4\0\65\0\12\0\1\0\35\0\2\0\13\0\6\0\12\0"+
    "\15\0\1\0\10\0\16\0\1\0\20\0\61\0\5\0\57\0\21\0"+
    "\10\0\3\0\12\0\21\0\11\0\14\0\3\0\36\0\15\0\2\0"+
    "\12\0\54\0\16\0\14\0\44\0\24\0\10\0\12\0\3\0\3\0"+
    "\12\0\44\0\2\0\11\0\7\0\53\0\2\0\3\0\20\0\3\0"+
    "\1\0\25\0\4\0\1\0\6\0\1\0\2\0\3\0\1\0\5\0"+
    "\300\0\100\0\u0116\0\2\0\6\0\2\0\46\0\2\0\6\0\2\0"+
    "\10\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\37\0\2\0"+
    "\65\0\1\0\7\0\1\0\1\0\3\0\3\0\1\0\7\0\3\0"+
    "\4\0\2\0\6\0\4\0\15\0\5\0\3\0\1\0\7\0\16\0"+
    "\5\0\32\0\5\0\20\0\2\0\23\0\1\0\13\0\5\0\1\0"+
    "\12\0\1\0\1\0\15\0\1\0\20\0\15\0\3\0\41\0\17\0"+
    "\15\0\4\0\1\0\3\0\14\0\21\0\1\0\4\0\1\0\2\0"+
    "\12\0\1\0\1\0\3\0\5\0\6\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\4\0\1\0\13\0\2\0\4\0\5\0\5\0\4\0"+
    "\1\0\21\0\51\0\u0a77\0\345\0\6\0\4\0\3\0\2\0\14\0"+
    "\46\0\1\0\1\0\5\0\1\0\2\0\70\0\7\0\1\0\17\0"+
    "\1\0\27\0\11\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0"+
    "\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\40\0"+
    "\57\0\1\0\u01d5\0\3\0\31\0\11\0\6\0\1\0\5\0\2\0"+
    "\5\0\4\0\126\0\2\0\2\0\2\0\3\0\1\0\132\0\1\0"+
    "\4\0\5\0\53\0\1\0\136\0\21\0\40\0\60\0\20\0\u0200\0"+
    "\u19c0\0\100\0\u568d\0\103\0\56\0\2\0\u010d\0\3\0\20\0\12\0"+
    "\2\0\24\0\57\0\1\0\4\0\12\0\1\0\37\0\2\0\120\0"+
    "\2\0\45\0\11\0\2\0\147\0\2\0\100\0\5\0\2\0\1\0"+
    "\1\0\1\0\5\0\30\0\20\0\1\0\3\0\1\0\4\0\1\0"+
    "\27\0\5\0\4\0\1\0\13\0\1\0\7\0\64\0\14\0\2\0"+
    "\62\0\22\0\12\0\12\0\6\0\22\0\6\0\3\0\1\0\1\0"+
    "\2\0\13\0\34\0\10\0\2\0\27\0\15\0\14\0\35\0\3\0"+
    "\4\0\57\0\16\0\16\0\1\0\12\0\6\0\5\0\1\0\12\0"+
    "\12\0\5\0\1\0\51\0\16\0\11\0\3\0\1\0\10\0\2\0"+
    "\2\0\12\0\6\0\27\0\3\0\1\0\3\0\62\0\1\0\1\0"+
    "\3\0\2\0\2\0\5\0\2\0\1\0\1\0\1\0\30\0\3\0"+
    "\2\0\13\0\5\0\2\0\3\0\2\0\12\0\6\0\2\0\6\0"+
    "\2\0\6\0\11\0\7\0\1\0\7\0\1\0\53\0\1\0\16\0"+
    "\6\0\163\0\10\0\1\0\2\0\2\0\12\0\6\0\u2ba4\0\14\0"+
    "\27\0\4\0\61\0\u2104\0\u016e\0\2\0\152\0\46\0\7\0\14\0"+
    "\5\0\5\0\1\0\1\0\12\0\1\0\15\0\1\0\5\0\1\0"+
    "\1\0\1\0\2\0\1\0\2\0\1\0\154\0\41\0\u016b\0\22\0"+
    "\100\0\2\0\66\0\50\0\15\0\3\0\20\0\20\0\20\0\3\0"+
    "\2\0\30\0\3\0\31\0\1\0\6\0\5\0\1\0\207\0\2\0"+
    "\1\0\4\0\1\0\13\0\12\0\7\0\32\0\4\0\1\0\1\0"+
    "\32\0\13\0\131\0\3\0\6\0\2\0\6\0\2\0\6\0\2\0"+
    "\3\0\3\0\2\0\3\0\2\0\22\0\3\0\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    63,   126,   189,   126,   252,   315,   126,   126,   126, 
      378,   126,   126,   441,   126,   126,   126,   126,   126,   504, 
      567,   630,   693,   756,   819,   882,   945,  1008,  1071,  1134, 
     1197,  1260,  1323,  1386,  1449,  1512,  1575,  1638,  1701,  1764, 
     1827,  1890,   315,  1953,  2016,  2079,   126,  2142,  2205,  2268, 
     2331,  2394,  2457,  2520,  2583,  2646,   315,  2709,  2772,  2835, 
     2898,  2961,  3024,   315,  3087,   315,  3150,  3213,  3276,   315, 
     3339,  3402,  3465,  3528,  3591,   315,  3654,  3717,  3780,  3843, 
     3906,  3969,  4032,  4095,  4158,  4221,  4284,   315,  4347,  4410, 
     4473,   315,  4536,   315,   315,  4599,  4662,  4725,  4788,  4851, 
     4914,  4977,  5040,  5103,  5166,  5229,   315,  5292,  5355,  5418, 
     5481,  5544,  5607,  5670,  5733,  5796,  5859,  5922,  5985,  6048, 
     6111,  6174,  6237,  6300,  6363,   315,  6426,  6489,  6552,  6615, 
     6678,  6741,  6804,  6867,  6930,  6993,  7056,  7119,  7182,  7245, 
     7308,  7371,  7434,   315,   315,   315,   315,   315,   315,  7497, 
     7560,  7623,  7686,  7749,  7812,  7875,   315,  7938,  8001,   315, 
     8064,  8127,  8190,  8253,   315,  8316,  8379,  8442,  8505,  8568, 
     8631,  8694,  8757,  8820,  8883,  8946,  9009,  9072,  9135,  9198, 
      315,  9261,  9324,  9387,  9450,  9513,  9576,   315,  9639,   315, 
     9702,  9765,  9828,  9891,  9954, 10017,   315,   315, 10080, 10143, 
    10206, 10269, 10332, 10395, 10458, 10521, 10584, 10647, 10710, 10773, 
    10836, 10899, 10962,   315, 11025,   315, 11088,   315,   315, 11151, 
    11214, 11277, 11340, 11403, 11466, 11529, 11592, 11655, 11718,   315, 
    11781,   315, 11844, 11907, 11970, 12033, 12096,   315, 12159, 12222, 
    12285, 12348, 12411, 12474, 12537, 12600, 12663, 12726,   315, 12789, 
    12852, 12915, 12978, 13041, 13104, 13167, 13230, 13293,   315, 13356, 
    13419,   315, 13482,   315, 13545, 13608, 13671, 13734,   315,   315, 
    13797, 13860, 13923, 13986,   315, 14049, 14112, 14175, 14238, 14301, 
    14364, 14427, 14490, 14553, 14616,   315, 14679, 14742,   315, 14805, 
    14868,   315, 14931, 14994, 15057, 15120, 15183, 15246, 15309, 15372, 
    15435, 15498, 15561,   315, 15624, 15687, 15750, 15813, 15876, 15939, 
    16002, 16065, 16128, 16191, 16254, 16317,   315, 16380, 16443, 16506, 
    16569, 16632, 16695, 16758,   315, 16821,   315, 16884,   315, 16947, 
    17010,   315, 17073, 17136, 17199, 17262, 17325, 17388, 17451, 17514, 
    17577, 17640, 17703, 17766, 17829, 17892, 17955, 18018, 18081, 18144, 
    18207,   315, 18270, 18333,   315,   315,   315, 18396, 18459, 18522, 
    18585, 18648, 18711,   315, 18774,   315, 18837, 18900, 18963, 19026, 
    19089, 19152, 19215, 19278,   315,   315,   315, 19341, 19404, 19467, 
    19530, 19593, 19656, 19719,   315, 19782, 19845, 19908, 19971, 20034, 
    20097, 20160, 20223, 20286,   315, 20349, 20412, 20475,   315, 20538, 
    20601, 20664, 20727, 20790, 20853, 20916, 20979,   315, 21042, 21105, 
    21168, 21231, 21294, 21357, 21420,   315,   315, 21483, 21546,   315, 
      315, 21609, 21672, 21735, 21798, 21861, 21924, 21987, 22050, 22113, 
    22176, 22239, 22302, 22365, 22428, 22491, 22554, 22617, 22680,   315, 
      315, 22743,   315,   315,   315,   315,   315, 22806, 22869,   315, 
    22932,   315, 22995, 23058, 23121, 23184, 23247, 23310, 23373, 23436, 
    23499, 23562, 23625, 23688, 23751, 23814, 23877, 23940, 24003, 24066, 
      315, 24129, 24192, 24255, 24318, 24381, 24444,   315, 24507,   315, 
    24570, 24633, 24696,   315, 24759, 24822,   315, 24885, 24948, 25011, 
      315,   315, 25074,   315, 25137, 25200, 25263,   315, 25326, 25389, 
    25452,   315, 25515, 25578, 25641, 25704, 25767,   315, 25830, 25893, 
    25956, 26019, 26082, 26145, 26208, 26271, 26334, 26397, 26460,   315, 
    26523,   315, 26586, 26649, 26712, 26775,   315, 26838, 26901,   315, 
    26964, 27027, 27090, 27153,   315, 27216, 27279, 27342, 27405, 27468, 
    27531, 27594, 27657, 27720,   315, 27783, 27846, 27909, 27972, 28035, 
    28098, 28161, 28224, 28287, 28350, 28413, 28476, 28539, 28602,   315, 
      315, 28665,   315, 28728, 28791, 28854, 28917, 28980, 29043, 29106, 
    29169, 29232,   315, 29295,   315,   315,   315,   315,   315, 29358, 
    29421,   315,   315, 29484, 29547,   315,   315, 29610, 29673, 29736, 
      315,   315, 29799,   315,   315, 29862,   315, 29925, 29988,   315, 
    30051, 30114,   315,   315, 30177, 30240, 30303,   315, 30366,   315, 
    30429, 30492,   315,   315,   315, 30555, 30618, 30681,   315,   315, 
      315,   315,   315, 30744, 30807, 30870,   315, 30933,   315,   315, 
    30996, 31059,   315, 31122, 31185, 31248, 31311, 31374,   315, 31437, 
      315,   315, 31500, 31563, 31626,   315,   315, 31689, 31752,   315, 
      315,   315, 31815, 31878, 31941, 32004, 32067, 32130, 32193,   315, 
    32256,   315, 32319,   315,   315,   315,   315, 32382, 32445,   315, 
      315,   315,   315,   315,   315,   315,   315, 32508,   315,   315, 
    32571, 32634, 32697, 32760, 32823, 32886,   315,   315,   315,   315, 
    32949, 33012,   315, 33075, 33138,   315, 33201,   315, 33264,   315, 
    33327, 33390, 33453, 33516, 33579, 33642,   315, 33705, 33768,   315, 
    33831,   315,   315,   315, 33894,   315, 33957, 34020, 34083,   315, 
      315, 34146, 34209,   315, 34272,   315,   126,   315,   315,   315, 
      315, 34335, 34398, 34461,   126
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\2\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\5\7\1\25\5\7\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\7\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\7\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\6\6\1\7"+
    "\77\3\101\0\1\5\100\0\1\6\2\7\3\0\1\7"+
    "\10\0\45\7\6\6\1\7\4\0\3\7\3\0\1\7"+
    "\10\0\54\7\4\0\3\7\3\0\1\7\10\0\23\7"+
    "\1\55\3\7\1\56\24\7\6\0\1\57\74\0\3\7"+
    "\3\0\1\7\10\0\1\7\1\60\52\7\4\0\3\7"+
    "\3\0\1\7\10\0\10\7\1\61\43\7\4\0\3\7"+
    "\3\0\1\7\10\0\15\7\1\62\2\7\1\63\2\7"+
    "\1\64\3\7\1\65\1\66\13\7\1\67\7\7\4\0"+
    "\3\7\3\0\1\70\10\0\34\7\1\71\17\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\72\2\7\1\73"+
    "\1\74\1\7\1\75\3\7\1\76\14\7\1\77\7\7"+
    "\4\0\3\7\3\0\1\7\10\0\14\7\1\100\1\101"+
    "\1\7\1\102\1\103\2\7\1\104\1\105\1\106\1\107"+
    "\1\110\7\7\1\111\4\7\1\112\7\7\4\0\3\7"+
    "\3\0\1\113\10\0\25\7\1\114\3\7\1\115\2\7"+
    "\1\116\17\7\4\0\3\7\3\0\1\7\10\0\15\7"+
    "\1\117\2\7\1\120\2\7\1\121\3\7\1\122\14\7"+
    "\1\123\7\7\4\0\3\7\3\0\1\7\10\0\14\7"+
    "\1\124\6\7\1\125\3\7\1\126\24\7\4\0\3\7"+
    "\3\0\1\127\10\0\21\7\1\130\1\131\14\7\1\132"+
    "\14\7\4\0\3\7\3\0\1\7\10\0\15\7\1\133"+
    "\1\7\1\134\1\135\1\136\3\7\1\137\1\140\1\141"+
    "\24\7\4\0\3\7\3\0\1\7\10\0\14\7\1\142"+
    "\3\7\1\143\2\7\1\144\30\7\4\0\3\7\3\0"+
    "\1\7\10\0\14\7\1\145\1\7\1\146\2\7\1\147"+
    "\3\7\1\150\5\7\1\151\3\7\1\152\14\7\4\0"+
    "\3\7\3\0\1\7\10\0\21\7\1\153\7\7\1\154"+
    "\22\7\4\0\3\7\3\0\1\7\10\0\14\7\1\155"+
    "\1\156\1\157\1\160\1\161\1\7\1\162\4\7\1\163"+
    "\1\164\3\7\1\165\7\7\1\166\7\7\4\0\3\7"+
    "\3\0\1\7\10\0\14\7\1\167\37\7\4\0\3\7"+
    "\3\0\1\7\10\0\34\7\1\170\17\7\4\0\3\7"+
    "\3\0\1\7\10\0\15\7\1\171\2\7\1\172\6\7"+
    "\1\173\1\174\23\7\4\0\3\7\3\0\1\7\10\0"+
    "\37\7\1\175\14\7\4\0\3\7\3\0\1\7\10\0"+
    "\14\7\1\176\1\177\2\7\1\200\1\201\1\7\1\202"+
    "\1\7\1\203\1\7\1\204\1\205\23\7\4\0\3\7"+
    "\3\0\1\7\10\0\20\7\1\206\33\7\4\0\3\7"+
    "\3\0\1\7\10\0\23\7\1\207\3\7\1\210\1\7"+
    "\1\211\22\7\4\0\3\7\3\0\1\7\10\0\30\7"+
    "\1\212\23\7\4\0\3\7\3\0\1\7\10\0\14\7"+
    "\1\213\1\214\1\7\1\215\1\216\10\7\1\217\13\7"+
    "\1\220\1\221\1\222\1\223\1\224\1\225\1\7\4\0"+
    "\3\7\3\0\1\226\10\0\31\7\1\227\12\7\1\230"+
    "\7\7\4\0\3\7\3\0\1\7\10\0\34\7\1\231"+
    "\17\7\4\0\3\7\3\0\1\7\10\0\2\7\1\232"+
    "\51\7\4\0\3\7\3\0\1\7\10\0\11\7\1\233"+
    "\42\7\4\0\3\7\3\0\1\7\10\0\16\7\1\234"+
    "\2\7\1\235\5\7\1\236\1\7\1\237\7\7\1\240"+
    "\12\7\4\0\3\7\3\0\1\7\10\0\32\7\1\241"+
    "\21\7\4\0\3\7\3\0\1\7\10\0\40\7\1\242"+
    "\13\7\4\0\3\7\3\0\1\7\10\0\25\7\1\243"+
    "\26\7\4\0\3\7\3\0\1\7\10\0\21\7\1\244"+
    "\32\7\4\0\3\7\3\0\1\7\10\0\31\7\1\245"+
    "\22\7\4\0\3\7\3\0\1\7\10\0\16\7\1\246"+
    "\35\7\4\0\3\7\3\0\1\247\10\0\21\7\1\250"+
    "\32\7\4\0\3\7\3\0\1\7\10\0\14\7\1\251"+
    "\2\7\1\252\34\7\4\0\3\7\3\0\1\7\10\0"+
    "\27\7\1\253\24\7\4\0\3\7\3\0\1\254\10\0"+
    "\21\7\1\255\1\7\1\256\1\7\1\257\26\7\4\0"+
    "\3\7\3\0\1\7\10\0\22\7\1\260\31\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\261\11\7\1\262"+
    "\24\7\4\0\3\7\3\0\1\7\10\0\33\7\1\263"+
    "\20\7\4\0\3\7\3\0\1\7\10\0\17\7\1\264"+
    "\34\7\4\0\3\7\3\0\1\7\10\0\22\7\1\265"+
    "\31\7\4\0\3\7\3\0\1\7\10\0\22\7\1\266"+
    "\31\7\4\0\3\7\3\0\1\7\10\0\23\7\1\267"+
    "\30\7\4\0\3\7\3\0\1\7\10\0\37\7\1\270"+
    "\14\7\4\0\3\7\3\0\1\7\10\0\23\7\1\271"+
    "\30\7\4\0\3\7\3\0\1\7\10\0\15\7\1\272"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\22\7\1\273"+
    "\6\7\1\274\22\7\4\0\3\7\3\0\1\7\10\0"+
    "\34\7\1\275\17\7\4\0\3\7\3\0\1\7\10\0"+
    "\32\7\1\276\21\7\4\0\3\7\3\0\1\7\10\0"+
    "\26\7\1\277\3\7\1\300\21\7\4\0\3\7\3\0"+
    "\1\301\10\0\54\7\4\0\3\7\3\0\1\302\10\0"+
    "\54\7\4\0\3\7\3\0\1\303\10\0\37\7\1\304"+
    "\14\7\4\0\3\7\3\0\1\7\10\0\31\7\1\305"+
    "\22\7\4\0\3\7\3\0\1\7\10\0\15\7\1\306"+
    "\5\7\1\307\30\7\4\0\3\7\3\0\1\7\10\0"+
    "\21\7\1\310\32\7\4\0\3\7\3\0\1\7\10\0"+
    "\14\7\1\311\14\7\1\312\22\7\4\0\3\7\3\0"+
    "\1\7\10\0\14\7\1\313\1\7\1\314\6\7\1\315"+
    "\1\316\2\7\1\317\2\7\1\320\1\7\1\321\1\322"+
    "\14\7\4\0\3\7\3\0\1\7\10\0\17\7\1\323"+
    "\34\7\4\0\3\7\3\0\1\7\10\0\42\7\1\324"+
    "\11\7\4\0\3\7\3\0\1\7\10\0\16\7\1\325"+
    "\2\7\1\326\4\7\1\327\25\7\4\0\3\7\3\0"+
    "\1\7\10\0\14\7\1\330\14\7\1\331\7\7\1\332"+
    "\12\7\4\0\3\7\3\0\1\333\10\0\54\7\4\0"+
    "\3\7\3\0\1\7\10\0\17\7\1\334\34\7\4\0"+
    "\3\7\3\0\1\7\10\0\27\7\1\335\24\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\336\3\7\1\337"+
    "\32\7\4\0\3\7\3\0\1\7\10\0\14\7\1\340"+
    "\37\7\4\0\3\7\3\0\1\7\10\0\15\7\1\341"+
    "\1\342\35\7\4\0\3\7\3\0\1\7\10\0\14\7"+
    "\1\343\1\7\1\344\1\345\34\7\4\0\3\7\3\0"+
    "\1\7\10\0\17\7\1\346\1\347\1\350\32\7\4\0"+
    "\3\7\3\0\1\7\10\0\25\7\1\351\26\7\4\0"+
    "\3\7\3\0\1\7\10\0\20\7\1\352\33\7\4\0"+
    "\3\7\3\0\1\7\10\0\23\7\1\353\13\7\1\354"+
    "\14\7\4\0\3\7\3\0\1\7\10\0\15\7\1\355"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\16\7\1\356"+
    "\35\7\4\0\3\7\3\0\1\7\10\0\21\7\1\357"+
    "\32\7\4\0\3\7\3\0\1\7\10\0\14\7\1\360"+
    "\6\7\1\361\20\7\1\362\7\7\4\0\3\7\3\0"+
    "\1\7\10\0\14\7\1\363\7\7\1\364\2\7\1\365"+
    "\24\7\4\0\3\7\3\0\1\7\10\0\53\7\1\366"+
    "\4\0\3\7\3\0\1\7\10\0\27\7\1\367\24\7"+
    "\4\0\3\7\3\0\1\7\10\0\34\7\1\370\17\7"+
    "\4\0\3\7\3\0\1\7\10\0\22\7\1\371\11\7"+
    "\1\372\2\7\1\373\14\7\4\0\3\7\3\0\1\7"+
    "\10\0\27\7\1\374\24\7\4\0\3\7\3\0\1\7"+
    "\10\0\27\7\1\375\24\7\4\0\3\7\3\0\1\7"+
    "\10\0\23\7\1\376\30\7\4\0\3\7\3\0\1\7"+
    "\10\0\21\7\1\377\32\7\4\0\3\7\3\0\1\7"+
    "\10\0\17\7\1\u0100\5\7\1\u0101\26\7\4\0\3\7"+
    "\3\0\1\7\10\0\25\7\1\u0102\26\7\4\0\3\7"+
    "\3\0\1\7\10\0\22\7\1\u0103\10\7\1\u0104\20\7"+
    "\4\0\3\7\3\0\1\7\10\0\21\7\1\u0105\32\7"+
    "\4\0\3\7\3\0\1\7\10\0\25\7\1\u0106\26\7"+
    "\4\0\3\7\3\0\1\7\10\0\21\7\1\u0107\32\7"+
    "\4\0\3\7\3\0\1\7\10\0\32\7\1\u0108\21\7"+
    "\4\0\3\7\3\0\1\7\10\0\23\7\1\u0109\30\7"+
    "\4\0\3\7\3\0\1\7\10\0\14\7\1\u010a\2\7"+
    "\1\u010b\5\7\1\u010c\5\7\1\u010d\20\7\4\0\3\7"+
    "\3\0\1\7\10\0\23\7\1\u010e\30\7\4\0\3\7"+
    "\3\0\1\7\10\0\31\7\1\u010f\22\7\4\0\3\7"+
    "\3\0\1\7\10\0\17\7\1\u0110\34\7\4\0\3\7"+
    "\3\0\1\7\10\0\25\7\1\u0111\26\7\4\0\3\7"+
    "\3\0\1\7\10\0\20\7\1\u0112\33\7\4\0\3\7"+
    "\3\0\1\7\10\0\14\7\1\u0113\4\7\1\u0114\32\7"+
    "\4\0\3\7\3\0\1\7\10\0\20\7\1\u0115\33\7"+
    "\4\0\3\7\3\0\1\7\10\0\31\7\1\u0116\22\7"+
    "\4\0\3\7\3\0\1\7\10\0\15\7\1\u0117\36\7"+
    "\4\0\3\7\3\0\1\7\10\0\20\7\1\u0118\6\7"+
    "\1\u0119\24\7\4\0\3\7\3\0\1\7\10\0\17\7"+
    "\1\u011a\14\7\1\u011b\17\7\4\0\3\7\3\0\1\7"+
    "\10\0\25\7\1\u011c\26\7\4\0\3\7\3\0\1\7"+
    "\10\0\20\7\1\u011d\33\7\4\0\3\7\3\0\1\7"+
    "\10\0\15\7\1\u011e\36\7\4\0\3\7\3\0\1\7"+
    "\10\0\16\7\1\u011f\35\7\4\0\3\7\3\0\1\7"+
    "\10\0\14\7\1\u0120\37\7\4\0\3\7\3\0\1\7"+
    "\10\0\15\7\1\u0121\36\7\4\0\3\7\3\0\1\7"+
    "\10\0\3\7\1\u0122\50\7\4\0\3\7\3\0\1\7"+
    "\10\0\12\7\1\u0123\41\7\4\0\3\7\3\0\1\7"+
    "\10\0\17\7\1\u0124\34\7\4\0\3\7\3\0\1\7"+
    "\10\0\25\7\1\u0125\26\7\4\0\3\7\3\0\1\7"+
    "\10\0\15\7\1\u0126\36\7\4\0\3\7\3\0\1\7"+
    "\10\0\44\7\1\u0127\7\7\4\0\3\7\3\0\1\7"+
    "\10\0\31\7\1\u0128\1\u0129\21\7\4\0\3\7\3\0"+
    "\1\7\10\0\20\7\1\u012a\33\7\4\0\3\7\3\0"+
    "\1\7\10\0\15\7\1\u012b\36\7\4\0\3\7\3\0"+
    "\1\7\10\0\17\7\1\u012c\34\7\4\0\3\7\3\0"+
    "\1\7\10\0\17\7\1\u012d\34\7\4\0\3\7\3\0"+
    "\1\7\10\0\21\7\1\u012e\32\7\4\0\3\7\3\0"+
    "\1\7\10\0\16\7\1\u012f\35\7\4\0\3\7\3\0"+
    "\1\7\10\0\15\7\1\u0130\36\7\4\0\3\7\3\0"+
    "\1\7\10\0\31\7\1\u0131\22\7\4\0\3\7\3\0"+
    "\1\7\10\0\17\7\1\u0132\34\7\4\0\3\7\3\0"+
    "\1\7\10\0\31\7\1\u0133\1\u0134\21\7\4\0\3\7"+
    "\3\0\1\7\10\0\14\7\1\u0135\37\7\4\0\3\7"+
    "\3\0\1\7\10\0\15\7\1\u0136\36\7\4\0\3\7"+
    "\3\0\1\7\10\0\17\7\1\u0137\34\7\4\0\3\7"+
    "\3\0\1\7\10\0\16\7\1\u0138\17\7\1\u0139\15\7"+
    "\4\0\3\7\3\0\1\7\10\0\14\7\1\u013a\37\7"+
    "\4\0\3\7\3\0\1\7\10\0\17\7\1\u013b\34\7"+
    "\4\0\3\7\3\0\1\7\10\0\21\7\1\u013c\32\7"+
    "\4\0\3\7\3\0\1\7\10\0\15\7\1\u013d\36\7"+
    "\4\0\3\7\3\0\1\7\10\0\23\7\1\u013e\30\7"+
    "\4\0\3\7\3\0\1\7\10\0\20\7\1\u013f\1\u0140"+
    "\32\7\4\0\3\7\3\0\1\7\10\0\25\7\1\u0141"+
    "\26\7\4\0\3\7\3\0\1\7\10\0\27\7\1\u0142"+
    "\24\7\4\0\3\7\3\0\1\7\10\0\30\7\1\u0143"+
    "\23\7\4\0\3\7\3\0\1\7\10\0\27\7\1\u0144"+
    "\24\7\4\0\3\7\3\0\1\7\10\0\17\7\1\u0145"+
    "\34\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u0146"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\36\7\1\u0147"+
    "\15\7\4\0\3\7\3\0\1\7\10\0\32\7\1\u0148"+
    "\21\7\4\0\3\7\3\0\1\7\10\0\32\7\1\u0149"+
    "\21\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u014a"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\26\7\1\u014b"+
    "\25\7\4\0\3\7\3\0\1\7\10\0\24\7\1\u014c"+
    "\27\7\4\0\3\7\3\0\1\7\10\0\27\7\1\u014d"+
    "\24\7\4\0\3\7\3\0\1\7\10\0\31\7\1\u014e"+
    "\22\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u014f"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\21\7\1\u0150"+
    "\22\7\1\u0151\7\7\4\0\3\7\3\0\1\7\10\0"+
    "\37\7\1\u0152\14\7\4\0\3\7\3\0\1\7\10\0"+
    "\23\7\1\u0153\30\7\4\0\3\7\3\0\1\7\10\0"+
    "\15\7\1\u0154\12\7\1\u0155\23\7\4\0\3\7\3\0"+
    "\1\7\10\0\23\7\1\u0156\30\7\4\0\3\7\3\0"+
    "\1\7\10\0\15\7\1\u0157\36\7\4\0\3\7\3\0"+
    "\1\7\10\0\21\7\1\u0158\32\7\4\0\3\7\3\0"+
    "\1\7\10\0\20\7\1\u0159\11\7\1\u015a\21\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\u015b\36\7\4\0"+
    "\3\7\3\0\1\7\10\0\21\7\1\u015c\32\7\4\0"+
    "\3\7\3\0\1\7\10\0\27\7\1\u015d\24\7\4\0"+
    "\3\7\3\0\1\7\10\0\27\7\1\u015e\24\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\u015f\11\7\1\u0160"+
    "\24\7\4\0\3\7\3\0\1\7\10\0\34\7\1\u0161"+
    "\17\7\4\0\3\7\3\0\1\7\10\0\21\7\1\u0162"+
    "\32\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u0163"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\34\7\1\u0164"+
    "\17\7\4\0\3\7\3\0\1\7\10\0\27\7\1\u0165"+
    "\24\7\4\0\3\7\3\0\1\7\10\0\44\7\1\u0166"+
    "\7\7\4\0\3\7\3\0\1\7\10\0\23\7\1\u0167"+
    "\30\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u0168"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\20\7\1\u0169"+
    "\33\7\4\0\3\7\3\0\1\7\10\0\32\7\1\u016a"+
    "\21\7\4\0\3\7\3\0\1\7\10\0\14\7\1\u016b"+
    "\37\7\4\0\3\7\3\0\1\7\10\0\31\7\1\u016c"+
    "\22\7\4\0\3\7\3\0\1\7\10\0\41\7\1\u016d"+
    "\12\7\4\0\3\7\3\0\1\7\10\0\14\7\1\u016e"+
    "\37\7\4\0\3\7\3\0\1\7\10\0\34\7\1\u016f"+
    "\17\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u0170"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\20\7\1\u0171"+
    "\33\7\4\0\3\7\3\0\1\7\10\0\22\7\1\u0172"+
    "\31\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u0173"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\23\7\1\u0174"+
    "\30\7\4\0\3\7\3\0\1\7\10\0\21\7\1\u0175"+
    "\32\7\4\0\3\7\3\0\1\u0176\10\0\54\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\u0177\36\7\4\0"+
    "\3\7\3\0\1\u0178\10\0\54\7\4\0\3\7\3\0"+
    "\1\7\10\0\22\7\1\u0179\31\7\4\0\3\7\3\0"+
    "\1\7\10\0\34\7\1\u017a\17\7\4\0\3\7\3\0"+
    "\1\7\10\0\34\7\1\u017b\17\7\4\0\3\7\3\0"+
    "\1\7\10\0\21\7\1\u017c\32\7\4\0\3\7\3\0"+
    "\1\7\10\0\22\7\1\u017d\31\7\4\0\3\7\3\0"+
    "\1\7\10\0\30\7\1\u017e\23\7\4\0\3\7\3\0"+
    "\1\u017f\10\0\35\7\1\u0180\16\7\4\0\3\7\3\0"+
    "\1\7\10\0\27\7\1\u0181\14\7\1\u0182\7\7\4\0"+
    "\3\7\3\0\1\7\10\0\20\7\1\u0183\33\7\4\0"+
    "\3\7\3\0\1\7\10\0\25\7\1\u0184\26\7\4\0"+
    "\3\7\3\0\1\7\10\0\21\7\1\u0185\32\7\4\0"+
    "\3\7\3\0\1\7\10\0\17\7\1\u0186\34\7\4\0"+
    "\3\7\3\0\1\7\10\0\23\7\1\u0187\30\7\4\0"+
    "\3\7\3\0\1\7\10\0\16\7\1\u0188\35\7\4\0"+
    "\3\7\3\0\1\7\10\0\25\7\1\u0189\26\7\4\0"+
    "\3\7\3\0\1\7\10\0\17\7\1\u018a\34\7\4\0"+
    "\3\7\3\0\1\7\10\0\24\7\1\u018b\27\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\u018c\36\7\4\0"+
    "\3\7\3\0\1\7\10\0\17\7\1\u018d\34\7\4\0"+
    "\3\7\3\0\1\7\10\0\17\7\1\u018e\34\7\4\0"+
    "\3\7\3\0\1\7\10\0\25\7\1\u018f\26\7\4\0"+
    "\3\7\3\0\1\7\10\0\20\7\1\u0190\7\7\1\u0191"+
    "\23\7\4\0\3\7\3\0\1\7\10\0\25\7\1\u0192"+
    "\26\7\4\0\3\7\3\0\1\7\10\0\17\7\1\u0193"+
    "\34\7\4\0\3\7\3\0\1\7\10\0\26\7\1\u0194"+
    "\25\7\4\0\3\7\3\0\1\7\10\0\32\7\1\u0195"+
    "\21\7\4\0\3\7\3\0\1\7\10\0\25\7\1\u0196"+
    "\26\7\4\0\3\7\3\0\1\7\10\0\22\7\1\u0197"+
    "\31\7\4\0\3\7\3\0\1\7\10\0\21\7\1\u0198"+
    "\32\7\4\0\3\7\3\0\1\7\10\0\25\7\1\u0199"+
    "\26\7\4\0\3\7\3\0\1\7\10\0\25\7\1\u019a"+
    "\26\7\4\0\3\7\3\0\1\7\10\0\14\7\1\u019b"+
    "\37\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u019c"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\4\7\1\u019d"+
    "\47\7\4\0\3\7\3\0\1\7\10\0\13\7\1\u019e"+
    "\40\7\4\0\3\7\3\0\1\7\10\0\23\7\1\u019f"+
    "\30\7\4\0\3\7\3\0\1\7\10\0\17\7\1\u01a0"+
    "\34\7\4\0\3\7\3\0\1\7\10\0\17\7\1\u01a1"+
    "\34\7\4\0\3\7\3\0\1\7\10\0\22\7\1\u01a2"+
    "\31\7\4\0\3\7\3\0\1\7\10\0\14\7\1\u01a3"+
    "\37\7\4\0\3\7\3\0\1\7\10\0\23\7\1\u01a4"+
    "\30\7\4\0\3\7\3\0\1\7\10\0\31\7\1\u01a5"+
    "\22\7\4\0\3\7\3\0\1\7\10\0\24\7\1\u01a6"+
    "\27\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u01a7"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\22\7\1\u01a8"+
    "\6\7\1\u01a9\22\7\4\0\3\7\3\0\1\7\10\0"+
    "\21\7\1\u01aa\32\7\4\0\3\7\3\0\1\7\10\0"+
    "\31\7\1\u01ab\22\7\4\0\3\7\3\0\1\7\10\0"+
    "\15\7\1\u01ac\36\7\4\0\3\7\3\0\1\7\10\0"+
    "\22\7\1\u01ad\31\7\4\0\3\7\3\0\1\7\10\0"+
    "\14\7\1\u01ae\37\7\4\0\3\7\3\0\1\7\10\0"+
    "\25\7\1\u01af\26\7\4\0\3\7\3\0\1\7\10\0"+
    "\17\7\1\u01b0\17\7\1\u01b1\14\7\4\0\3\7\3\0"+
    "\1\7\10\0\20\7\1\u01b2\33\7\4\0\3\7\3\0"+
    "\1\7\10\0\36\7\1\u01b3\15\7\4\0\3\7\3\0"+
    "\1\7\10\0\37\7\1\u01b4\14\7\4\0\3\7\3\0"+
    "\1\7\10\0\23\7\1\u01b5\5\7\1\u01b6\22\7\4\0"+
    "\3\7\3\0\1\7\10\0\27\7\1\u01b7\24\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\u01b8\36\7\4\0"+
    "\3\7\3\0\1\7\10\0\17\7\1\u01b9\34\7\4\0"+
    "\3\7\3\0\1\u01ba\10\0\54\7\4\0\3\7\3\0"+
    "\1\7\10\0\15\7\1\u01bb\36\7\4\0\3\7\3\0"+
    "\1\7\10\0\24\7\1\u01bc\27\7\4\0\3\7\3\0"+
    "\1\7\10\0\25\7\1\u01bd\26\7\4\0\3\7\3\0"+
    "\1\7\10\0\17\7\1\u01be\34\7\4\0\3\7\3\0"+
    "\1\7\10\0\22\7\1\u01bf\31\7\4\0\3\7\3\0"+
    "\1\u01c0\10\0\54\7\4\0\3\7\3\0\1\7\10\0"+
    "\25\7\1\u01c1\26\7\4\0\3\7\3\0\1\7\10\0"+
    "\21\7\1\u01c2\32\7\4\0\3\7\3\0\1\7\10\0"+
    "\20\7\1\u01c3\33\7\4\0\3\7\3\0\1\7\10\0"+
    "\34\7\1\u01c4\17\7\4\0\3\7\3\0\1\7\10\0"+
    "\40\7\1\u01c5\13\7\4\0\3\7\3\0\1\7\10\0"+
    "\31\7\1\u01c6\22\7\4\0\3\7\3\0\1\7\10\0"+
    "\20\7\1\u01c7\33\7\4\0\3\7\3\0\1\7\10\0"+
    "\27\7\1\u01c8\24\7\4\0\3\7\3\0\1\7\10\0"+
    "\21\7\1\u01c9\32\7\4\0\3\7\3\0\1\7\10\0"+
    "\16\7\1\u01ca\35\7\4\0\3\7\3\0\1\7\10\0"+
    "\21\7\1\u01cb\32\7\4\0\3\7\3\0\1\7\10\0"+
    "\37\7\1\u01cc\14\7\4\0\3\7\3\0\1\7\10\0"+
    "\30\7\1\u01cd\23\7\4\0\3\7\3\0\1\7\10\0"+
    "\24\7\1\u01ce\27\7\4\0\3\7\3\0\1\7\10\0"+
    "\30\7\1\u01cf\23\7\4\0\3\7\3\0\1\7\10\0"+
    "\23\7\1\u01d0\30\7\4\0\3\7\3\0\1\7\10\0"+
    "\14\7\1\u01d1\37\7\4\0\3\7\3\0\1\7\10\0"+
    "\16\7\1\u01d2\35\7\4\0\3\7\3\0\1\7\10\0"+
    "\27\7\1\u01d3\24\7\4\0\3\7\3\0\1\7\10\0"+
    "\30\7\1\u01d4\23\7\4\0\3\7\3\0\1\7\10\0"+
    "\37\7\1\u01d5\14\7\4\0\3\7\3\0\1\7\10\0"+
    "\17\7\1\u01d6\34\7\4\0\3\7\3\0\1\7\10\0"+
    "\15\7\1\u01d7\36\7\4\0\3\7\3\0\1\7\10\0"+
    "\25\7\1\u01d8\26\7\4\0\3\7\3\0\1\7\10\0"+
    "\20\7\1\u01d9\33\7\4\0\3\7\3\0\1\u01da\10\0"+
    "\54\7\4\0\3\7\3\0\1\7\10\0\22\7\1\u01db"+
    "\6\7\1\u01dc\22\7\4\0\3\7\3\0\1\7\10\0"+
    "\23\7\1\u01dd\30\7\4\0\3\7\3\0\1\u01de\10\0"+
    "\54\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u01df"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u01e0"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\27\7\1\u01e1"+
    "\24\7\4\0\3\7\3\0\1\7\10\0\16\7\1\u01e2"+
    "\35\7\4\0\3\7\3\0\1\7\10\0\22\7\1\u01e3"+
    "\31\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u01e4"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\34\7\1\u01e5"+
    "\17\7\4\0\3\7\3\0\1\u01e6\10\0\54\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\u01e7\36\7\4\0"+
    "\3\7\3\0\1\7\10\0\25\7\1\u01e8\26\7\4\0"+
    "\3\7\3\0\1\7\10\0\27\7\1\u01e9\24\7\4\0"+
    "\3\7\3\0\1\7\10\0\20\7\1\u01ea\33\7\4\0"+
    "\3\7\3\0\1\7\10\0\21\7\1\u01eb\32\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\u01ec\36\7\4\0"+
    "\3\7\3\0\1\7\10\0\22\7\1\u01ed\31\7\4\0"+
    "\3\7\3\0\1\7\10\0\31\7\1\u01ee\22\7\4\0"+
    "\3\7\3\0\1\7\10\0\21\7\1\u01ef\7\7\1\u01f0"+
    "\22\7\4\0\3\7\3\0\1\7\10\0\23\7\1\u01f1"+
    "\30\7\4\0\3\7\3\0\1\7\10\0\27\7\1\u01f2"+
    "\24\7\4\0\3\7\3\0\1\7\10\0\21\7\1\u01f3"+
    "\32\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u01f4"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\20\7\1\u01f5"+
    "\33\7\4\0\3\7\3\0\1\7\10\0\40\7\1\u01f6"+
    "\13\7\4\0\3\7\3\0\1\7\10\0\36\7\1\u01f7"+
    "\15\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u01f8"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\23\7\1\u01f9"+
    "\30\7\4\0\3\7\3\0\1\7\10\0\21\7\1\u01fa"+
    "\32\7\4\0\3\7\3\0\1\7\10\0\23\7\1\u01fb"+
    "\30\7\4\0\3\7\3\0\1\7\10\0\44\7\1\u01fc"+
    "\7\7\4\0\3\7\3\0\1\7\10\0\32\7\1\u01fd"+
    "\21\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u01fe"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u01ff"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\20\7\1\u0200"+
    "\33\7\4\0\3\7\3\0\1\7\10\0\21\7\1\u0201"+
    "\32\7\4\0\3\7\3\0\1\7\10\0\44\7\1\u0202"+
    "\7\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u0203"+
    "\36\7\4\0\3\7\1\0\1\u0204\1\0\1\7\10\0"+
    "\54\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u0205"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u0206"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\20\7\1\u0207"+
    "\33\7\4\0\3\7\3\0\1\7\10\0\26\7\1\u0208"+
    "\25\7\4\0\3\7\3\0\1\7\10\0\5\7\1\u0209"+
    "\46\7\4\0\3\7\3\0\1\7\10\0\3\7\1\u020a"+
    "\50\7\4\0\3\7\3\0\1\u020b\10\0\54\7\4\0"+
    "\3\7\3\0\1\7\10\0\27\7\1\u020c\24\7\4\0"+
    "\3\7\3\0\1\7\10\0\23\7\1\u020d\30\7\4\0"+
    "\3\7\3\0\1\7\10\0\22\7\1\u020e\31\7\4\0"+
    "\3\7\3\0\1\7\10\0\14\7\1\u020f\37\7\4\0"+
    "\3\7\3\0\1\7\10\0\27\7\1\u0210\24\7\4\0"+
    "\3\7\3\0\1\7\10\0\22\7\1\u0211\31\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\u0212\36\7\4\0"+
    "\3\7\3\0\1\7\10\0\20\7\1\u0213\33\7\4\0"+
    "\3\7\3\0\1\u0214\10\0\54\7\4\0\3\7\3\0"+
    "\1\7\10\0\27\7\1\u0215\24\7\4\0\3\7\3\0"+
    "\1\7\10\0\23\7\1\u0216\30\7\4\0\3\7\3\0"+
    "\1\7\10\0\31\7\1\u0217\22\7\4\0\3\7\3\0"+
    "\1\7\10\0\24\7\1\u0218\27\7\4\0\3\7\3\0"+
    "\1\7\10\0\27\7\1\u0219\24\7\4\0\3\7\3\0"+
    "\1\7\10\0\23\7\1\u021a\30\7\4\0\3\7\3\0"+
    "\1\7\10\0\15\7\1\u021b\36\7\4\0\3\7\3\0"+
    "\1\7\10\0\23\7\1\u021c\30\7\4\0\3\7\3\0"+
    "\1\7\10\0\26\7\1\u021d\25\7\4\0\3\7\3\0"+
    "\1\7\10\0\15\7\1\u021e\36\7\4\0\3\7\3\0"+
    "\1\7\10\0\14\7\1\u021f\37\7\4\0\3\7\3\0"+
    "\1\7\10\0\25\7\1\u0220\26\7\4\0\3\7\3\0"+
    "\1\7\10\0\25\7\1\u0221\26\7\4\0\3\7\3\0"+
    "\1\7\10\0\15\7\1\u0222\36\7\4\0\3\7\3\0"+
    "\1\7\10\0\21\7\1\u0223\32\7\4\0\3\7\3\0"+
    "\1\7\10\0\23\7\1\u0224\30\7\4\0\3\7\3\0"+
    "\1\7\10\0\15\7\1\u0225\36\7\4\0\3\7\3\0"+
    "\1\7\10\0\16\7\1\u0226\35\7\4\0\3\7\3\0"+
    "\1\u0227\10\0\54\7\4\0\3\7\3\0\1\7\10\0"+
    "\16\7\1\u0228\35\7\4\0\3\7\3\0\1\7\10\0"+
    "\30\7\1\u0229\23\7\4\0\3\7\3\0\1\7\10\0"+
    "\15\7\1\u022a\36\7\4\0\3\7\3\0\1\7\10\0"+
    "\34\7\1\u022b\17\7\4\0\3\7\3\0\1\7\10\0"+
    "\31\7\1\u022c\22\7\4\0\3\7\3\0\1\7\10\0"+
    "\22\7\1\u022d\2\7\1\u022e\2\7\1\u022f\23\7\4\0"+
    "\3\7\3\0\1\7\10\0\14\7\1\u0230\37\7\4\0"+
    "\3\7\3\0\1\u0231\10\0\54\7\4\0\3\7\3\0"+
    "\1\7\10\0\23\7\1\u0232\30\7\4\0\3\7\3\0"+
    "\1\7\10\0\17\7\1\u0233\34\7\4\0\3\7\3\0"+
    "\1\7\10\0\14\7\1\u0234\37\7\4\0\3\7\3\0"+
    "\1\7\10\0\21\7\1\u0235\32\7\4\0\3\7\3\0"+
    "\1\7\10\0\21\7\1\u0236\32\7\4\0\3\7\3\0"+
    "\1\7\10\0\20\7\1\u0237\33\7\4\0\3\7\3\0"+
    "\1\7\10\0\31\7\1\u0238\22\7\4\0\3\7\3\0"+
    "\1\7\10\0\41\7\1\u0239\12\7\4\0\3\7\3\0"+
    "\1\7\10\0\24\7\1\u023a\27\7\4\0\3\7\3\0"+
    "\1\7\10\0\17\7\1\u023b\34\7\4\0\3\7\3\0"+
    "\1\7\10\0\31\7\1\u023c\22\7\4\0\3\7\3\0"+
    "\1\u023d\10\0\54\7\4\0\3\7\3\0\1\7\10\0"+
    "\31\7\1\u023e\22\7\4\0\3\7\3\0\1\7\10\0"+
    "\22\7\1\u023f\31\7\4\0\3\7\3\0\1\7\10\0"+
    "\17\7\1\u0240\34\7\4\0\3\7\3\0\1\7\10\0"+
    "\17\7\1\u0241\34\7\4\0\3\7\3\0\1\7\10\0"+
    "\15\7\1\u0242\36\7\4\0\3\7\3\0\1\7\10\0"+
    "\32\7\1\u0243\21\7\4\0\3\7\3\0\1\7\10\0"+
    "\37\7\1\u0244\14\7\4\0\3\7\3\0\1\7\10\0"+
    "\14\7\1\u0245\37\7\4\0\3\7\3\0\1\7\10\0"+
    "\17\7\1\u0246\34\7\4\0\3\7\3\0\1\7\10\0"+
    "\31\7\1\u0247\22\7\4\0\3\7\3\0\1\7\10\0"+
    "\27\7\1\u0248\24\7\4\0\3\7\3\0\1\7\10\0"+
    "\22\7\1\u0249\31\7\4\0\3\7\3\0\1\7\10\0"+
    "\25\7\1\u024a\26\7\4\0\3\7\3\0\1\7\10\0"+
    "\15\7\1\u024b\36\7\4\0\3\7\3\0\1\u024c\10\0"+
    "\54\7\4\0\3\7\3\0\1\7\10\0\22\7\1\u024d"+
    "\31\7\4\0\3\7\3\0\1\7\10\0\43\7\1\u024e"+
    "\10\7\4\0\3\7\3\0\1\7\10\0\14\7\1\u024f"+
    "\37\7\4\0\3\7\3\0\1\7\10\0\34\7\1\u0250"+
    "\17\7\4\0\3\7\3\0\1\7\10\0\20\7\1\u0251"+
    "\33\7\4\0\3\7\3\0\1\u0252\10\0\54\7\4\0"+
    "\3\7\3\0\1\u0253\10\0\54\7\4\0\3\7\3\0"+
    "\1\7\10\0\17\7\1\u0254\34\7\4\0\3\7\3\0"+
    "\1\7\10\0\31\7\1\u0255\22\7\4\0\3\7\3\0"+
    "\1\7\10\0\26\7\1\u0256\25\7\4\0\3\7\3\0"+
    "\1\7\10\0\27\7\1\u0257\24\7\4\0\3\7\3\0"+
    "\1\7\10\0\17\7\1\u0258\34\7\4\0\3\7\3\0"+
    "\1\7\10\0\14\7\1\u0259\37\7\40\0\1\u025a\42\0"+
    "\3\7\3\0\1\u025b\10\0\54\7\4\0\3\7\3\0"+
    "\1\7\10\0\31\7\1\u025c\22\7\4\0\3\7\3\0"+
    "\1\7\10\0\22\7\1\u025d\31\7\4\0\3\7\3\0"+
    "\1\7\10\0\6\7\1\u025e\45\7\4\0\3\7\3\0"+
    "\1\7\10\0\21\7\1\u025f\32\7\4\0\3\7\3\0"+
    "\1\u0260\10\0\54\7\4\0\3\7\3\0\1\7\10\0"+
    "\30\7\1\u0261\23\7\4\0\3\7\3\0\1\7\10\0"+
    "\15\7\1\u0262\36\7\4\0\3\7\3\0\1\7\10\0"+
    "\25\7\1\u0263\26\7\4\0\3\7\3\0\1\7\10\0"+
    "\27\7\1\u0264\24\7\4\0\3\7\3\0\1\7\10\0"+
    "\25\7\1\u0265\26\7\4\0\3\7\3\0\1\7\10\0"+
    "\17\7\1\u0266\34\7\4\0\3\7\3\0\1\u0267\10\0"+
    "\54\7\4\0\3\7\3\0\1\7\10\0\30\7\1\u0268"+
    "\23\7\4\0\3\7\3\0\1\7\10\0\22\7\1\u0269"+
    "\31\7\4\0\3\7\3\0\1\7\10\0\31\7\1\u026a"+
    "\22\7\4\0\3\7\3\0\1\u026b\10\0\54\7\4\0"+
    "\3\7\3\0\1\7\10\0\25\7\1\u026c\26\7\4\0"+
    "\3\7\3\0\1\7\10\0\33\7\1\u026d\20\7\4\0"+
    "\3\7\3\0\1\7\10\0\26\7\1\u026e\25\7\4\0"+
    "\3\7\3\0\1\7\10\0\17\7\1\u026f\34\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\u0270\36\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\u0271\36\7\4\0"+
    "\3\7\3\0\1\7\10\0\31\7\1\u0272\22\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\u0273\36\7\4\0"+
    "\3\7\3\0\1\7\10\0\14\7\1\u0274\37\7\4\0"+
    "\3\7\3\0\1\7\10\0\17\7\1\u0275\34\7\4\0"+
    "\3\7\3\0\1\7\10\0\36\7\1\u0276\15\7\4\0"+
    "\3\7\3\0\1\7\10\0\32\7\1\u0277\21\7\4\0"+
    "\3\7\3\0\1\7\10\0\21\7\1\u0278\32\7\4\0"+
    "\3\7\3\0\1\7\10\0\31\7\1\u0279\22\7\4\0"+
    "\3\7\3\0\1\7\10\0\16\7\1\u027a\35\7\4\0"+
    "\3\7\3\0\1\7\10\0\20\7\1\u027b\33\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\u027c\36\7\4\0"+
    "\3\7\3\0\1\7\10\0\14\7\1\u027d\37\7\4\0"+
    "\3\7\3\0\1\7\10\0\23\7\1\u027e\30\7\4\0"+
    "\3\7\3\0\1\7\10\0\22\7\1\u027f\31\7\4\0"+
    "\3\7\3\0\1\7\10\0\30\7\1\u0280\23\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\u0281\36\7\4\0"+
    "\3\7\3\0\1\7\10\0\17\7\1\u0282\34\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\u0283\36\7\4\0"+
    "\3\7\3\0\1\7\10\0\34\7\1\u0284\17\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\u0285\36\7\4\0"+
    "\3\7\3\0\1\7\10\0\15\7\1\u0286\36\7\4\0"+
    "\3\7\3\0\1\7\10\0\34\7\1\u0287\17\7\4\0"+
    "\3\7\1\0\1\u0288\1\0\1\7\10\0\54\7\4\0"+
    "\3\7\3\0\1\7\10\0\36\7\1\u0289\15\7\4\0"+
    "\3\7\3\0\1\7\10\0\31\7\1\u028a\22\7\4\0"+
    "\3\7\3\0\1\7\10\0\24\7\1\u028b\27\7\4\0"+
    "\3\7\3\0\1\7\10\0\24\7\1\u028c\27\7\4\0"+
    "\3\7\3\0\1\u028d\10\0\54\7\4\0\3\7\3\0"+
    "\1\7\10\0\27\7\1\u028e\24\7\4\0\3\7\3\0"+
    "\1\7\10\0\32\7\1\u028f\21\7\4\0\3\7\3\0"+
    "\1\7\10\0\21\7\1\u0290\32\7\4\0\3\7\3\0"+
    "\1\7\10\0\30\7\1\u0291\23\7\4\0\3\7\3\0"+
    "\1\u0292\10\0\54\7\4\0\3\7\3\0\1\7\10\0"+
    "\24\7\1\u0293\27\7\4\0\3\7\3\0\1\7\10\0"+
    "\24\7\1\u0294\27\7\4\0\3\7\3\0\1\u0295\10\0"+
    "\54\7\4\0\3\7\3\0\1\7\10\0\31\7\1\u0296"+
    "\22\7\66\0\1\u0297\14\0\3\7\3\0\1\7\10\0"+
    "\17\7\1\u0298\34\7\4\0\3\7\3\0\1\7\10\0"+
    "\7\7\1\u0299\44\7\4\0\3\7\3\0\1\7\10\0"+
    "\24\7\1\u029a\27\7\4\0\3\7\3\0\1\7\10\0"+
    "\22\7\1\u029b\31\7\4\0\3\7\3\0\1\7\10\0"+
    "\25\7\1\u029c\26\7\4\0\3\7\3\0\1\7\10\0"+
    "\16\7\1\u029d\35\7\4\0\3\7\3\0\1\7\10\0"+
    "\22\7\1\u029e\31\7\4\0\3\7\3\0\1\7\10\0"+
    "\15\7\1\u029f\36\7\4\0\3\7\3\0\1\7\10\0"+
    "\15\7\1\u02a0\36\7\4\0\3\7\3\0\1\7\10\0"+
    "\27\7\1\u02a1\24\7\4\0\3\7\3\0\1\7\10\0"+
    "\33\7\1\u02a2\20\7\4\0\3\7\3\0\1\7\10\0"+
    "\16\7\1\u02a3\35\7\4\0\3\7\3\0\1\7\10\0"+
    "\25\7\1\u02a4\26\7\4\0\3\7\3\0\1\7\10\0"+
    "\15\7\1\u02a5\36\7\4\0\3\7\3\0\1\7\10\0"+
    "\20\7\1\u02a6\33\7\4\0\3\7\3\0\1\7\10\0"+
    "\17\7\1\u02a7\34\7\4\0\3\7\3\0\1\7\10\0"+
    "\17\7\1\u02a8\34\7\4\0\3\7\3\0\1\7\10\0"+
    "\23\7\1\u02a9\1\7\1\u02aa\2\7\1\u02ab\3\7\1\u02ac"+
    "\17\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u02ad"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\40\7\1\u02ae"+
    "\13\7\4\0\3\7\3\0\1\7\10\0\22\7\1\u02af"+
    "\31\7\4\0\3\7\3\0\1\7\10\0\25\7\1\u02b0"+
    "\26\7\4\0\3\7\3\0\1\7\10\0\15\7\1\u02b1"+
    "\36\7\4\0\3\7\3\0\1\7\10\0\17\7\1\u02b2"+
    "\34\7\41\0\1\u02b3\41\0\3\7\3\0\1\7\10\0"+
    "\15\7\1\u02b4\36\7\4\0\3\7\3\0\1\7\10\0"+
    "\32\7\1\u02b5\21\7\4\0\3\7\3\0\1\7\10\0"+
    "\16\7\1\u02b6\35\7\4\0\3\7\3\0\1\7\10\0"+
    "\17\7\1\u02b7\34\7\4\0\3\7\3\0\1\7\10\0"+
    "\15\7\1\u02b8\36\7\4\0\3\7\3\0\1\7\10\0"+
    "\23\7\1\u02b9\30\7\4\0\3\7\3\0\1\7\10\0"+
    "\15\7\1\u02ba\36\7\4\0\3\7\3\0\1\7\10\0"+
    "\22\7\1\u02bb\31\7\4\0\3\7\3\0\1\7\10\0"+
    "\32\7\1\u02bc\21\7\53\0\1\u02bd\27\0\3\7\3\0"+
    "\1\7\10\0\20\7\1\u02be\33\7\4\0\3\7\3\0"+
    "\1\7\10\0\20\7\1\u02bf\33\7\4\0\3\7\3\0"+
    "\1\7\10\0\16\7\1\u02c0\35\7\4\0\3\7\3\0"+
    "\1\7\10\0\30\7\1\u02c1\23\7\4\0\3\7\3\0"+
    "\1\7\10\0\23\7\1\u02c2\30\7\4\0\3\7\3\0"+
    "\1\7\10\0\22\7\1\u02c3\31\7\4\0\3\7\3\0"+
    "\1\7\10\0\23\7\1\u02c4\30\7\4\0\3\7\3\0"+
    "\1\7\10\0\31\7\1\u02c5\22\7\4\0\3\7\3\0"+
    "\1\u02c6\10\0\54\7\67\0\1\u02c7\13\0\3\7\3\0"+
    "\1\7\10\0\24\7\1\u02c8\27\7\4\0\3\7\3\0"+
    "\1\7\10\0\15\7\1\u02c9\36\7\4\0\3\7\3\0"+
    "\1\7\10\0\44\7\1\u02ca\7\7\4\0\3\7\3\0"+
    "\1\7\10\0\17\7\1\u02cb\34\7\4\0\3\7\3\0"+
    "\1\7\10\0\15\7\1\u02cc\36\7\43\0\1\u02cd\37\0"+
    "\3\7\3\0\1\u02ce\10\0\54\7\4\0\3\7\3\0"+
    "\1\u02cf\10\0\54\7\4\0\3\7\3\0\1\7\10\0"+
    "\36\7\1\u02d0\15\7\4\0\3\7\3\0\1\7\10\0"+
    "\17\7\1\u02d1\34\7\4\0\3\7\3\0\1\7\10\0"+
    "\40\7\1\u02d2\13\7\4\0\3\7\3\0\1\7\10\0"+
    "\41\7\1\u02d3\12\7\4\0\3\7\3\0\1\7\10\0"+
    "\31\7\1\u02d4\22\7\52\0\1\u02d5\30\0\3\7\3\0"+
    "\1\7\10\0\15\7\1\u02d6\36\7\64\0\1\u02d7\16\0"+
    "\3\7\3\0\1\7\10\0\32\7\1\u02d8\21\7\4\0"+
    "\3\7\3\0\1\7\10\0\32\7\1\u02d9\21\7\4\0"+
    "\3\7\3\0\1\u02da\10\0\54\7\4\0\3\7\3\0"+
    "\1\7\10\0\15\7\1\u02db\36\7\37\0\1\u02dc\113\0"+
    "\1\u02dd\62\0\1\u02de\100\0\1\u02df\34\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  9,  1,  9,  1,  1,  9,  9,  9,  1,  9,  9,  1,  9,  9, 
     9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1, 
     1,  1,  1,  1,  0,  1,  9,  1,  1,  1,  1,  0,  0,  0,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[34524];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2316) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 664: 
          {  return symbolFactory.newSymbol("DOCTYPE", DOCTYPE); }
        case 736: break;
        case 661: 
          {  return symbolFactory.newSymbol("HEADERS", HEADERS);  }
        case 737: break;
        case 659: 
          {  return symbolFactory.newSymbol("JUSTIFY", JUSTIFY);  }
        case 738: break;
        case 651: 
          {  return symbolFactory.newSymbol("SUMMARY", SUMMARY);  }
        case 739: break;
        case 650: 
          {  return symbolFactory.newSymbol("STANDBY", STANDBY); }
        case 740: break;
        case 649: 
          {  return symbolFactory.newSymbol("ADDRESS", ADDRESS); }
        case 741: break;
        case 646: 
          {  return symbolFactory.newSymbol("ACRONYM", ACRONYM); }
        case 742: break;
        case 645: 
          {  return symbolFactory.newSymbol("ARCHIVE", ARCHIVE); }
        case 743: break;
        case 641: 
          {  return symbolFactory.newSymbol("DEFAULT", DEFAULT); }
        case 744: break;
        case 640: 
          {  return symbolFactory.newSymbol("DECLARE", DECLARE); }
        case 745: break;
        case 638: 
          {  return symbolFactory.newSymbol("ONKEYUP", ONKEYUP); }
        case 746: break;
        case 632: 
          {  return symbolFactory.newSymbol("ONFOCUS", ONFOCUS); }
        case 747: break;
        case 629: 
          {  return symbolFactory.newSymbol("ONCLICK", ONCLICK); }
        case 748: break;
        case 628: 
          {  return symbolFactory.newSymbol("ONRESET", ONRESET);  }
        case 749: break;
        case 626: 
          {  return symbolFactory.newSymbol("PROFILE", PROFILE); }
        case 750: break;
        case 622: 
          {  return symbolFactory.newSymbol("CHARSET", CHARSET); }
        case 751: break;
        case 621: 
          {  return symbolFactory.newSymbol("CHAROFF", CHAROFF);  }
        case 752: break;
        case 619: 
          {  return symbolFactory.newSymbol("CHECKED", CHECKED);  }
        case 753: break;
        case 618: 
          {  return symbolFactory.newSymbol("CAPTION", CAPTION);  }
        case 754: break;
        case 614: 
          {  return symbolFactory.newSymbol("COLSPAN", COLSPAN);  }
        case 755: break;
        case 612: 
          {  return symbolFactory.newSymbol("CLASSID", CLASSID); }
        case 756: break;
        case 609: 
          {  return symbolFactory.newSymbol("ENCTYPE", ENCTYPE);  }
        case 757: break;
        case 607: 
          {  return symbolFactory.newSymbol("ROWSPAN", ROWSPAN);  }
        case 758: break;
        case 25: 
          {  return symbolFactory.newSymbol("I", I); }
        case 759: break;
        case 27: 
          {  return symbolFactory.newSymbol("P", P); }
        case 760: break;
        case 31: 
          {  return symbolFactory.newSymbol("A", A); }
        case 761: break;
        case 38: 
          {  return symbolFactory.newSymbol("B", B); }
        case 762: break;
        case 42: 
          {  return symbolFactory.newSymbol("Q", Q); }
        case 763: break;
        case 8: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 764: break;
        case 9: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 765: break;
        case 415: 
          {  return symbolFactory.newSymbol("RESET", RESET);  }
        case 766: break;
        case 416: 
          {  return symbolFactory.newSymbol("RIGHT", RIGHT);  }
        case 767: break;
        case 419: 
          {  return symbolFactory.newSymbol("RADIO", RADIO);  }
        case 768: break;
        case 420: 
          {  return symbolFactory.newSymbol("RULES", RULES);  }
        case 769: break;
        case 426: 
          {  return symbolFactory.newSymbol("CLASS", CLASS); }
        case 770: break;
        case 439: 
          {  return symbolFactory.newSymbol("TITLE", TITLE); }
        case 771: break;
        case 440: 
          {  return symbolFactory.newSymbol("TFOOT", TFOOT);  }
        case 772: break;
        case 442: 
          {  return symbolFactory.newSymbol("TABLE", TABLE); }
        case 773: break;
        case 443: 
          {  return symbolFactory.newSymbol("TBODY", TBODY);  }
        case 774: break;
        case 444: 
          {  return symbolFactory.newSymbol("THEAD", THEAD);  }
        case 775: break;
        case 445: 
          {  return symbolFactory.newSymbol("INPUT", INPUT); }
        case 776: break;
        case 446: 
          {  return symbolFactory.newSymbol("ISMAP", ISMAP); }
        case 777: break;
        case 449: 
          {  return symbolFactory.newSymbol("LABEL", LABEL); }
        case 778: break;
        case 451: 
          {  return symbolFactory.newSymbol("PARAM", PARAM); }
        case 779: break;
        case 470: 
          {  return symbolFactory.newSymbol("FRAME", FRAME);  }
        case 780: break;
        case 477: 
          {  return symbolFactory.newSymbol("ALIGN", ALIGN);  }
        case 781: break;
        case 479: 
          {  return symbolFactory.newSymbol("ABOVE", ABOVE);  }
        case 782: break;
        case 483: 
          {  return symbolFactory.newSymbol("SCOPE", SCOPE);  }
        case 783: break;
        case 486: 
          {  return symbolFactory.newSymbol("STYLE", STYLE); }
        case 784: break;
        case 490: 
          {  return symbolFactory.newSymbol("SMALL", SMALL); }
        case 785: break;
        case 491: 
          {  return symbolFactory.newSymbol("SHAPE", SHAPE); }
        case 786: break;
        case 493: 
          {  return symbolFactory.newSymbol("XMLNS", XMLNS); }
        case 787: break;
        case 497: 
          {  return symbolFactory.newSymbol("MEDIA", MEDIA); }
        case 788: break;
        case 501: 
          {  return symbolFactory.newSymbol("BELOW", BELOW);  }
        case 789: break;
        case 507: 
          {  return symbolFactory.newSymbol("WIDTH", WIDTH); }
        case 790: break;
        case 509: 
          {  return symbolFactory.newSymbol("VALUE", VALUE); }
        case 791: break;
        case 2: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 792: break;
        case 725: 
          {  return symbolFactory.newSymbol("BLOCKQUOTE", BLOCKQUOTE); }
        case 793: break;
        case 723: 
          {  return symbolFactory.newSymbol("ONKEYPRESS", ONKEYPRESS); }
        case 794: break;
        case 720: 
          {  return symbolFactory.newSymbol("ONMOUSEOUT", ONMOUSEOUT); }
        case 795: break;
        case 719: 
          {  return symbolFactory.newSymbol("ONDBLCLICK", ONDBLCLICK); }
        case 796: break;
        case 274: 
          {  return symbolFactory.newSymbol("VAR", VAR); }
        case 797: break;
        case 269: 
          {  return symbolFactory.newSymbol("BDO", BDO); }
        case 798: break;
        case 268: 
          {  return symbolFactory.newSymbol("BOX", BOX);  }
        case 799: break;
        case 263: 
          {  return symbolFactory.newSymbol("BIG", BIG); }
        case 800: break;
        case 261: 
          {  return symbolFactory.newSymbol("KBD", KBD); }
        case 801: break;
        case 258: 
          {  return symbolFactory.newSymbol("MAP", MAP); }
        case 802: break;
        case 250: 
          {  return symbolFactory.newSymbol("SUB", SUB); }
        case 803: break;
        case 248: 
          {  return symbolFactory.newSymbol("SUP", SUP); }
        case 804: break;
        case 237: 
          {  return symbolFactory.newSymbol("SRC", SRC); }
        case 805: break;
        case 231: 
          {  return symbolFactory.newSymbol("ALL", ALL);  }
        case 806: break;
        case 229: 
          {  return symbolFactory.newSymbol("ALT", ALT); }
        case 807: break;
        case 223: 
          {  return symbolFactory.newSymbol("FOR", FOR);  }
        case 808: break;
        case 218: 
          {  return symbolFactory.newSymbol("DFN", DFN); }
        case 809: break;
        case 217: 
          {  return symbolFactory.newSymbol("DIV", DIV); }
        case 810: break;
        case 215: 
          {  return symbolFactory.newSymbol("DIR", DIR); }
        case 811: break;
        case 213: 
          {  return symbolFactory.newSymbol("DEL", DEL); }
        case 812: break;
        case 197: 
          {  return symbolFactory.newSymbol("PRE", PRE); }
        case 813: break;
        case 196: 
          {  return symbolFactory.newSymbol("LHS", LHS);  }
        case 814: break;
        case 189: 
          {  return symbolFactory.newSymbol("IMG", IMG); }
        case 815: break;
        case 187: 
          {  return symbolFactory.newSymbol("INS", INS); }
        case 816: break;
        case 180: 
          {  return symbolFactory.newSymbol("TOP", TOP);  }
        case 817: break;
        case 172: 
          {  return symbolFactory.newSymbol("COL", COL);  }
        case 818: break;
        case 164: 
          {  return symbolFactory.newSymbol("RHS", RHS);  }
        case 819: break;
        case 161: 
          {  return symbolFactory.newSymbol("ROW", ROW);  }
        case 820: break;
        case 159: 
          {  return symbolFactory.newSymbol("REV", REV); }
        case 821: break;
        case 156: 
          {  return symbolFactory.newSymbol("REL", REL); }
        case 822: break;
        case 699: 
          {  return symbolFactory.newSymbol("HREFLANG", HREFLANG); }
        case 823: break;
        case 697: 
          {  return symbolFactory.newSymbol("BASELINE", BASELINE);  }
        case 824: break;
        case 695: 
          {  return symbolFactory.newSymbol("MULTIPLE", MULTIPLE);  }
        case 825: break;
        case 692: 
          {  return symbolFactory.newSymbol("XML_LANG", XML_LANG); }
        case 826: break;
        case 689: 
          {  return symbolFactory.newSymbol("FIELDSET", FIELDSET); }
        case 827: break;
        case 688: 
          {  return symbolFactory.newSymbol("DATETIME", DATETIME); }
        case 828: break;
        case 687: 
          {  return symbolFactory.newSymbol("DISABLED", DISABLED);  }
        case 829: break;
        case 686: 
          {  return symbolFactory.newSymbol("OPTGROUP", OPTGROUP);  }
        case 830: break;
        case 679: 
          {  return symbolFactory.newSymbol("ONSUBMIT", ONSUBMIT);  }
        case 831: break;
        case 678: 
          {  return symbolFactory.newSymbol("ONSELECT", ONSELECT);  }
        case 832: break;
        case 676: 
          {  return symbolFactory.newSymbol("ONCHANGE", ONCHANGE);  }
        case 833: break;
        case 675: 
          {  return symbolFactory.newSymbol("PASSWORD", PASSWORD);  }
        case 834: break;
        case 674: 
          {  return symbolFactory.newSymbol("LONGDESC", LONGDESC); }
        case 835: break;
        case 673: 
          {  return symbolFactory.newSymbol("TABINDEX", TABINDEX); }
        case 836: break;
        case 672: 
          {  return symbolFactory.newSymbol("TEXTAREA", TEXTAREA); }
        case 837: break;
        case 671: 
          {  return symbolFactory.newSymbol("CODEBASE", CODEBASE); }
        case 838: break;
        case 670: 
          {  return symbolFactory.newSymbol("CODETYPE", CODETYPE); }
        case 839: break;
        case 669: 
          {  return symbolFactory.newSymbol("COLGROUP", COLGROUP);  }
        case 840: break;
        case 666: 
          {  return symbolFactory.newSymbol("ROWGROUP", ROWGROUP);  }
        case 841: break;
        case 665: 
          {  return symbolFactory.newSymbol("READONLY", READONLY);  }
        case 842: break;
        case 663: 
          {  return symbolFactory.newSymbol("NOSCRIPT", NOSCRIPT); }
        case 843: break;
        case 620: 
          {  return symbolFactory.newSymbol("CHECKBOX", CHECKBOX);  }
        case 844: break;
        case 13: 
          {  return symbolFactory.newSymbol("OPEN_TAG", OPEN_TAG); }
        case 845: break;
        case 730: 
          {  return symbolFactory.newSymbol("ONMOUSEMOVE", ONMOUSEMOVE); }
        case 846: break;
        case 729: 
          {  return symbolFactory.newSymbol("ONMOUSEDOWN", ONMOUSEDOWN); }
        case 847: break;
        case 728: 
          {  return symbolFactory.newSymbol("CELLSPACING", CELLSPACING);  }
        case 848: break;
        case 727: 
          {  return symbolFactory.newSymbol("CELLPADDING", CELLPADDING);  }
        case 849: break;
        case 17: 
          {  return symbolFactory.newSymbol("OPEN_SYMBOL", OPEN_SYMBOL); }
        case 850: break;
        case 15: 
          {  return symbolFactory.newSymbol("ATTR_ASSIGN", ATTR_ASSIGN); }
        case 851: break;
        case 0: 
        case 6: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 26: 
        case 28: 
        case 29: 
        case 30: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 39: 
        case 40: 
        case 41: 
        case 43: 
        case 44: 
        case 45: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 64: 
        case 66: 
        case 67: 
        case 68: 
        case 70: 
        case 71: 
        case 72: 
        case 74: 
        case 76: 
        case 77: 
        case 78: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 88: 
        case 89: 
        case 90: 
        case 92: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 157: 
        case 158: 
        case 160: 
        case 162: 
        case 163: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 188: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 214: 
        case 216: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 230: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 249: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 259: 
        case 260: 
        case 262: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 286: 
        case 287: 
        case 289: 
        case 290: 
        case 292: 
        case 293: 
        case 294: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 304: 
        case 305: 
        case 307: 
        case 308: 
        case 310: 
        case 311: 
        case 312: 
        case 315: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 325: 
        case 327: 
        case 329: 
        case 330: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 352: 
        case 353: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 364: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 396: 
        case 397: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 404: 
        case 406: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 417: 
        case 418: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 441: 
        case 447: 
        case 448: 
        case 450: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 476: 
        case 478: 
        case 480: 
        case 481: 
        case 482: 
        case 484: 
        case 485: 
        case 487: 
        case 488: 
        case 489: 
        case 492: 
        case 494: 
        case 495: 
        case 496: 
        case 498: 
        case 499: 
        case 500: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 508: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 516: 
        case 517: 
        case 518: 
        case 520: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 527: 
        case 528: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 561: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 571: 
        case 573: 
        case 579: 
        case 580: 
        case 583: 
        case 584: 
        case 587: 
        case 588: 
        case 589: 
        case 592: 
        case 595: 
        case 597: 
        case 598: 
        case 600: 
        case 604: 
        case 605: 
        case 606: 
        case 608: 
        case 610: 
        case 611: 
        case 615: 
        case 616: 
        case 617: 
        case 623: 
        case 624: 
        case 625: 
        case 627: 
        case 630: 
        case 631: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 639: 
        case 642: 
        case 643: 
        case 644: 
        case 648: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 660: 
        case 667: 
        case 668: 
        case 677: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 691: 
        case 693: 
        case 694: 
        case 696: 
        case 698: 
        case 701: 
        case 702: 
        case 703: 
        case 704: 
        case 705: 
        case 707: 
        case 708: 
        case 714: 
        case 717: 
        case 718: 
        case 721: 
        case 722: 
          {  return symbolFactory.newSymbol("STRING", STRING, yytext());  }
        case 852: break;
        case 291: 
          {  return symbolFactory.newSymbol("RECT", RECT); }
        case 853: break;
        case 288: 
          {  return symbolFactory.newSymbol("NAME", NAME); }
        case 854: break;
        case 285: 
          {  return symbolFactory.newSymbol("NONE", NONE);  }
        case 855: break;
        case 18: 
          {  return symbolFactory.newSymbol("SEMI", SEMI); }
        case 856: break;
        case 7: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 857: break;
        case 295: 
          {  return symbolFactory.newSymbol("ROWS", ROWS);  }
        case 858: break;
        case 303: 
          {  return symbolFactory.newSymbol("CITE", CITE); }
        case 859: break;
        case 306: 
          {  return symbolFactory.newSymbol("COLS", COLS);  }
        case 860: break;
        case 309: 
          {  return symbolFactory.newSymbol("CODE", CODE); }
        case 861: break;
        case 313: 
          {  return symbolFactory.newSymbol("CHAR", CHAR);  }
        case 862: break;
        case 314: 
          {  return symbolFactory.newSymbol("TEXT", TEXT);  }
        case 863: break;
        case 316: 
          {  return symbolFactory.newSymbol("TYPE", TYPE); }
        case 864: break;
        case 324: 
          {  return symbolFactory.newSymbol("LEFT", LEFT);  }
        case 865: break;
        case 326: 
          {  return symbolFactory.newSymbol("LINK", LINK); }
        case 866: break;
        case 328: 
          {  return symbolFactory.newSymbol("LANG", LANG); }
        case 867: break;
        case 331: 
          {  return symbolFactory.newSymbol("POLY", POLY); }
        case 868: break;
        case 351: 
          {  return symbolFactory.newSymbol("DATA", DATA); }
        case 869: break;
        case 354: 
          {  return symbolFactory.newSymbol("FILE", FILE);  }
        case 870: break;
        case 355: 
          {  return symbolFactory.newSymbol("FORM", FORM); }
        case 871: break;
        case 356: 
          {  return symbolFactory.newSymbol("AREA", AREA); }
        case 872: break;
        case 363: 
          {  return symbolFactory.newSymbol("AXIS", AXIS);  }
        case 873: break;
        case 365: 
          {  return symbolFactory.newSymbol("ABBR", ABBR); }
        case 874: break;
        case 374: 
          {  return symbolFactory.newSymbol("SIZE", SIZE);  }
        case 875: break;
        case 375: 
          {  return symbolFactory.newSymbol("SPAN", SPAN);  }
        case 876: break;
        case 376: 
          {  return symbolFactory.newSymbol("SAMP", SAMP); }
        case 877: break;
        case 384: 
          {  return symbolFactory.newSymbol("META", META); }
        case 878: break;
        case 394: 
          {  return symbolFactory.newSymbol("BODY", BODY); }
        case 879: break;
        case 395: 
          {  return symbolFactory.newSymbol("BASE", BASE); }
        case 880: break;
        case 398: 
          {  return symbolFactory.newSymbol("VOID", VOID);  }
        case 881: break;
        case 403: 
          {  return symbolFactory.newSymbol("HREF", HREF); }
        case 882: break;
        case 405: 
          {  return symbolFactory.newSymbol("HEAD", HEAD); }
        case 883: break;
        case 407: 
          {  return symbolFactory.newSymbol("HTML", HTML); }
        case 884: break;
        case 726: 
          {  return symbolFactory.newSymbol("HTTPEQUIV", HTTPEQUIV); }
        case 885: break;
        case 715: 
          {  return symbolFactory.newSymbol("VALUETYPE", VALUETYPE); }
        case 886: break;
        case 713: 
          {  return symbolFactory.newSymbol("MAXLENGTH", MAXLENGTH);  }
        case 887: break;
        case 712: 
          {  return symbolFactory.newSymbol("XML_SPACE", XML_SPACE); }
        case 888: break;
        case 711: 
          {  return symbolFactory.newSymbol("ACCESSKEY", ACCESSKEY); }
        case 889: break;
        case 709: 
          {  return symbolFactory.newSymbol("ONKEYDOWN", ONKEYDOWN); }
        case 890: break;
        case 706: 
          {  return symbolFactory.newSymbol("ONMOUSEUP", ONMOUSEUP); }
        case 891: break;
        case 14: 
          {  return symbolFactory.newSymbol("CLOSE_TAG", CLOSE_TAG); }
        case 892: break;
        case 16: 
          {  return symbolFactory.newSymbol("QUATATION_MARKS", QUATATION_MARKS); }
        case 893: break;
        case 613: 
          {  return symbolFactory.newSymbol("CONTENT", SCHEME); }
        case 894: break;
        case 603: 
          {  return symbolFactory.newSymbol("HSIDES", HSIDES);  }
        case 895: break;
        case 602: 
          {  return symbolFactory.newSymbol("HIDDEN", HIDDEN);  }
        case 896: break;
        case 599: 
          {  return symbolFactory.newSymbol("HEIGHT", HEIGHT); }
        case 897: break;
        case 596: 
          {  return symbolFactory.newSymbol("VSIDES", VSIDES);  }
        case 898: break;
        case 594: 
          {  return symbolFactory.newSymbol("VALIGN", VALIGN);  }
        case 899: break;
        case 593: 
          {  return symbolFactory.newSymbol("BUTTON", BUTTON); }
        case 900: break;
        case 591: 
          {  return symbolFactory.newSymbol("BOTTOM", BOTTOM);  }
        case 901: break;
        case 590: 
          {  return symbolFactory.newSymbol("BORDER", BORDER);  }
        case 902: break;
        case 586: 
          {  return symbolFactory.newSymbol("MIDDLE", MIDDLE);  }
        case 903: break;
        case 12: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 904: break;
        case 11: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 905: break;
        case 10: 
          {  return symbolFactory.newSymbol("UMINUS", UMINUS);  }
        case 906: break;
        case 519: 
          {  return symbolFactory.newSymbol("NOHREF", NOHREF); }
        case 907: break;
        case 521: 
          {  return symbolFactory.newSymbol("PUBLIC", PUBLIC); }
        case 908: break;
        case 526: 
          {  return symbolFactory.newSymbol("CENTER", CENTER);  }
        case 909: break;
        case 529: 
          {  return symbolFactory.newSymbol("CIRCLE", CIRCLE); }
        case 910: break;
        case 534: 
          {  return symbolFactory.newSymbol("COORDS", COORDS); }
        case 911: break;
        case 544: 
          {  return symbolFactory.newSymbol("LEGEND", LEGEND);  }
        case 912: break;
        case 559: 
          {  return symbolFactory.newSymbol("ONBLUR", ONBLUR); }
        case 913: break;
        case 560: 
          {  return symbolFactory.newSymbol("OPTION", OPTION);  }
        case 914: break;
        case 562: 
          {  return symbolFactory.newSymbol("OBJECT", OBJECT); }
        case 915: break;
        case 570: 
          {  return symbolFactory.newSymbol("ACCEPT", ACCEPT);  }
        case 916: break;
        case 572: 
          {  return symbolFactory.newSymbol("ACTION", ACTION); }
        case 917: break;
        case 574: 
          {  return symbolFactory.newSymbol("USEMAP", USEMAP); }
        case 918: break;
        case 575: 
          {  return symbolFactory.newSymbol("SELECT", SELECT); }
        case 919: break;
        case 576: 
          {  return symbolFactory.newSymbol("SCRIPT", SCRIPT); }
        case 920: break;
        case 577: 
          {  return symbolFactory.newSymbol("SCHEME", SCHEME); }
        case 921: break;
        case 578: 
          {  return symbolFactory.newSymbol("STRONG", STRONG); }
        case 922: break;
        case 581: 
          {  return symbolFactory.newSymbol("SUBMIT", SUBMIT);  }
        case 923: break;
        case 582: 
          {  return symbolFactory.newSymbol("GROUPS", GROUPS);  }
        case 924: break;
        case 585: 
          {  return symbolFactory.newSymbol("METHOD", METHOD); }
        case 925: break;
        case 46: 
          {  return symbolFactory.newSymbol("OPEN_CLOSING_TAG", OPEN_CLOSING_TAG); }
        case 926: break;
        case 734: 
          {  return symbolFactory.newSymbol("ACCEPT-CHARSET", ACCEPT_CHARSET);  }
        case 927: break;
        case 148: 
          {  return symbolFactory.newSymbol("H6", H6); }
        case 928: break;
        case 147: 
          {  return symbolFactory.newSymbol("H5", H5); }
        case 929: break;
        case 146: 
          {  return symbolFactory.newSymbol("H4", H4); }
        case 930: break;
        case 145: 
          {  return symbolFactory.newSymbol("H3", H3); }
        case 931: break;
        case 144: 
          {  return symbolFactory.newSymbol("H2", H2); }
        case 932: break;
        case 143: 
          {  return symbolFactory.newSymbol("H1", H1); }
        case 933: break;
        case 138: 
          {  return symbolFactory.newSymbol("HR", HR); }
        case 934: break;
        case 56: 
          {  return symbolFactory.newSymbol("EM", EM); }
        case 935: break;
        case 63: 
          {  return symbolFactory.newSymbol("TR", TR);  }
        case 936: break;
        case 65: 
          {  return symbolFactory.newSymbol("TT", TT); }
        case 937: break;
        case 69: 
          {  return symbolFactory.newSymbol("TD", TD);  }
        case 938: break;
        case 73: 
          {  return symbolFactory.newSymbol("TH", TH);  }
        case 939: break;
        case 75: 
          {  return symbolFactory.newSymbol("ID", ID); }
        case 940: break;
        case 79: 
          {  return symbolFactory.newSymbol("LI", LI); }
        case 941: break;
        case 87: 
          {  return symbolFactory.newSymbol("OL", OL); }
        case 942: break;
        case 91: 
          {  return symbolFactory.newSymbol("DT", DT); }
        case 943: break;
        case 93: 
          {  return symbolFactory.newSymbol("DL", DL); }
        case 944: break;
        case 94: 
          {  return symbolFactory.newSymbol("DD", DD); }
        case 945: break;
        case 106: 
          {  return symbolFactory.newSymbol("UL", UL); }
        case 946: break;
        case 125: 
          {  return symbolFactory.newSymbol("BR", BR); }
        case 947: break;
        case 5: 
          {  return symbolFactory.newSymbol("NUMBER", NUMBER, Integer.parseInt(yytext()));  }
        case 948: break;
        case 3: 
        case 4: 
          {                                }
        case 949: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
